{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server.ts"],"names":[],"mappings":"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","sourcesContent":["import * as WebSocket from 'ws';\r\n\r\nimport MessageTypes from './message-types';\r\nimport { GRAPHQL_WS, GRAPHQL_SUBSCRIPTIONS } from './protocol';\r\nimport isObject from './utils/is-object';\r\nimport {\r\n  parse,\r\n  ExecutionResult,\r\n  GraphQLSchema,\r\n  DocumentNode,\r\n  validate,\r\n  ValidationContext,\r\n  specifiedRules,\r\n  GraphQLFieldResolver,\r\n} from 'graphql';\r\nimport { createEmptyIterable } from './utils/empty-iterable';\r\nimport { createAsyncIterator, forAwaitEach, isAsyncIterable } from 'iterall';\r\nimport { isASubscriptionOperation } from './utils/is-subscriptions';\r\nimport { parseLegacyProtocolMessage } from './legacy/parse-legacy-protocol';\r\nimport { IncomingMessage } from 'http';\r\n\r\nexport type ExecutionIterator = AsyncIterator<ExecutionResult>;\r\n\r\nexport interface ExecutionParams<TContext = any> {\r\n  query: string | DocumentNode;\r\n  variables: { [key: string]: any };\r\n  operationName: string;\r\n  context: TContext;\r\n  formatResponse?: Function;\r\n  formatError?: Function;\r\n  callback?: Function;\r\n  schema?: GraphQLSchema;\r\n}\r\n\r\nexport type ConnectionContext = {\r\n  initPromise?: Promise<any>,\r\n  isLegacy: boolean,\r\n  socket: WebSocket,\r\n  request: IncomingMessage,\r\n  operations: {\r\n    [opId: string]: ExecutionIterator,\r\n  },\r\n};\r\n\r\nexport interface OperationMessagePayload {\r\n  [key: string]: any; // this will support for example any options sent in init like the auth token\r\n  query?: string;\r\n  variables?: { [key: string]: any };\r\n  operationName?: string;\r\n}\r\n\r\nexport interface OperationMessage {\r\n  payload?: OperationMessagePayload;\r\n  id?: string;\r\n  type: string;\r\n}\r\n\r\nexport type ExecuteFunction = (schema: GraphQLSchema,\r\n                               document: DocumentNode,\r\n                               rootValue?: any,\r\n                               contextValue?: any,\r\n                               variableValues?: { [key: string]: any },\r\n                               operationName?: string,\r\n                               fieldResolver?: GraphQLFieldResolver<any, any>) =>\r\n                               ExecutionResult |\r\n                               Promise<ExecutionResult> |\r\n                               AsyncIterator<ExecutionResult>;\r\n\r\nexport type SubscribeFunction = (schema: GraphQLSchema,\r\n                                 document: DocumentNode,\r\n                                 rootValue?: any,\r\n                                 contextValue?: any,\r\n                                 variableValues?: { [key: string]: any },\r\n                                 operationName?: string,\r\n                                 fieldResolver?: GraphQLFieldResolver<any, any>,\r\n                                 subscribeFieldResolver?: GraphQLFieldResolver<any, any>) =>\r\n                                 AsyncIterator<ExecutionResult> |\r\n                                 Promise<AsyncIterator<ExecutionResult> | ExecutionResult>;\r\n\r\nexport interface ServerOptions {\r\n  rootValue?: any;\r\n  schema?: GraphQLSchema;\r\n  execute?: ExecuteFunction;\r\n  subscribe?: SubscribeFunction;\r\n  validationRules?:\r\n    Array<(context: ValidationContext) => any> | ReadonlyArray<any>;\r\n  onOperation?: Function;\r\n  onOperationComplete?: Function;\r\n  onConnect?: Function;\r\n  onDisconnect?: Function;\r\n  keepAlive?: number;\r\n}\r\n\r\nconst isWebSocketServer = (socket: any) => socket.on;\r\n\r\nexport class SubscriptionServer {\r\n  private onOperation: Function;\r\n  private onOperationComplete: Function;\r\n  private onConnect: Function;\r\n  private onDisconnect: Function;\r\n\r\n  private wsServer: WebSocket.Server;\r\n  private execute: ExecuteFunction;\r\n  private subscribe: SubscribeFunction;\r\n  private schema: GraphQLSchema;\r\n  private rootValue: any;\r\n  private keepAlive: number;\r\n  private closeHandler: () => void;\r\n  private specifiedRules:\r\n    Array<(context: ValidationContext) => any> |\r\n    ReadonlyArray<any>;\r\n\r\n  public static create(options: ServerOptions, socketOptionsOrServer: WebSocket.ServerOptions | WebSocket.Server) {\r\n    return new SubscriptionServer(options, socketOptionsOrServer);\r\n  }\r\n\r\n  constructor(options: ServerOptions, socketOptionsOrServer: WebSocket.ServerOptions | WebSocket.Server) {\r\n    const {\r\n      onOperation, onOperationComplete, onConnect, onDisconnect, keepAlive,\r\n    } = options;\r\n\r\n    this.specifiedRules = options.validationRules || specifiedRules;\r\n    this.loadExecutor(options);\r\n\r\n    this.onOperation = onOperation;\r\n    this.onOperationComplete = onOperationComplete;\r\n    this.onConnect = onConnect;\r\n    this.onDisconnect = onDisconnect;\r\n    this.keepAlive = keepAlive;\r\n\r\n    if (isWebSocketServer(socketOptionsOrServer)) {\r\n      this.wsServer = <WebSocket.Server>socketOptionsOrServer;\r\n    } else {\r\n      // Init and connect WebSocket server to http\r\n      this.wsServer = new WebSocket.Server(socketOptionsOrServer || {});\r\n    }\r\n\r\n    const connectionHandler = ((socket: WebSocket, request: IncomingMessage) => {\r\n      // Add `upgradeReq` to the socket object to support old API, without creating a memory leak\r\n      // See: https://github.com/websockets/ws/pull/1099\r\n      (socket as any).upgradeReq = request;\r\n      // NOTE: the old GRAPHQL_SUBSCRIPTIONS protocol support should be removed in the future\r\n      if (socket.protocol === undefined ||\r\n        (socket.protocol.indexOf(GRAPHQL_WS) === -1 && socket.protocol.indexOf(GRAPHQL_SUBSCRIPTIONS) === -1)) {\r\n        // Close the connection with an error code, ws v2 ensures that the\r\n        // connection is cleaned up even when the closing handshake fails.\r\n        // 1002: protocol error\r\n        socket.close(1002);\r\n\r\n        return;\r\n      }\r\n\r\n      const connectionContext: ConnectionContext = Object.create(null);\r\n      connectionContext.initPromise = Promise.resolve(true);\r\n      connectionContext.isLegacy = false;\r\n      connectionContext.socket = socket;\r\n      connectionContext.request = request;\r\n      connectionContext.operations = {};\r\n\r\n      const connectionClosedHandler = (error: any) => {\r\n        if (error) {\r\n          this.sendError(\r\n            connectionContext,\r\n            '',\r\n            { message: error.message ? error.message : error },\r\n            MessageTypes.GQL_CONNECTION_ERROR,\r\n          );\r\n\r\n          setTimeout(() => {\r\n            // 1011 is an unexpected condition prevented the request from being fulfilled\r\n            connectionContext.socket.close(1011);\r\n          }, 10);\r\n        }\r\n        this.onClose(connectionContext);\r\n\r\n        if (this.onDisconnect) {\r\n          this.onDisconnect(socket, connectionContext);\r\n        }\r\n      };\r\n\r\n      socket.on('error', connectionClosedHandler);\r\n      socket.on('close', connectionClosedHandler);\r\n      socket.on('message', this.onMessage(connectionContext));\r\n    });\r\n\r\n    this.wsServer.on('connection', connectionHandler);\r\n    this.closeHandler = () => {\r\n      this.wsServer.removeListener('connection', connectionHandler);\r\n      this.wsServer.close();\r\n    };\r\n  }\r\n\r\n  public get server(): WebSocket.Server {\r\n    return this.wsServer;\r\n  }\r\n\r\n  public close(): void {\r\n    this.closeHandler();\r\n  }\r\n\r\n  private loadExecutor(options: ServerOptions) {\r\n    const { execute, subscribe, schema, rootValue } = options;\r\n\r\n    if (!execute) {\r\n      throw new Error('Must provide `execute` for websocket server constructor.');\r\n    }\r\n\r\n    this.schema = schema;\r\n    this.rootValue = rootValue;\r\n    this.execute = execute;\r\n    this.subscribe = subscribe;\r\n  }\r\n\r\n  private unsubscribe(connectionContext: ConnectionContext, opId: string) {\r\n    if (connectionContext.operations && connectionContext.operations[opId]) {\r\n      if (connectionContext.operations[opId].return) {\r\n        connectionContext.operations[opId].return();\r\n      }\r\n\r\n      delete connectionContext.operations[opId];\r\n\r\n      if (this.onOperationComplete) {\r\n        this.onOperationComplete(connectionContext.socket, opId);\r\n      }\r\n    }\r\n  }\r\n\r\n  private onClose(connectionContext: ConnectionContext) {\r\n    Object.keys(connectionContext.operations).forEach((opId) => {\r\n      this.unsubscribe(connectionContext, opId);\r\n    });\r\n  }\r\n\r\n  private onMessage(connectionContext: ConnectionContext) {\r\n    return (message: any) => {\r\n      let parsedMessage: OperationMessage;\r\n      try {\r\n        parsedMessage = parseLegacyProtocolMessage(connectionContext, JSON.parse(message));\r\n      } catch (e) {\r\n        this.sendError(connectionContext, null, { message: e.message }, MessageTypes.GQL_CONNECTION_ERROR);\r\n        return;\r\n      }\r\n\r\n      const opId = parsedMessage.id;\r\n      switch (parsedMessage.type) {\r\n        case MessageTypes.GQL_CONNECTION_INIT:\r\n          if (this.onConnect) {\r\n            connectionContext.initPromise = new Promise((resolve, reject) => {\r\n              try {\r\n                // TODO - this should become a function call with just 2 arguments in the future\r\n                // when we release the breaking change api: parsedMessage.payload and connectionContext\r\n                resolve(this.onConnect(parsedMessage.payload, connectionContext.socket, connectionContext));\r\n              } catch (e) {\r\n                reject(e);\r\n              }\r\n            });\r\n          }\r\n\r\n          connectionContext.initPromise.then((result) => {\r\n            if (result === false) {\r\n              throw new Error('Prohibited connection!');\r\n            }\r\n\r\n            this.sendMessage(\r\n              connectionContext,\r\n              undefined,\r\n              MessageTypes.GQL_CONNECTION_ACK,\r\n              undefined,\r\n            );\r\n\r\n            if (this.keepAlive) {\r\n              this.sendKeepAlive(connectionContext);\r\n              // Regular keep alive messages if keepAlive is set\r\n              const keepAliveTimer = setInterval(() => {\r\n                if (connectionContext.socket.readyState === WebSocket.OPEN) {\r\n                  this.sendKeepAlive(connectionContext);\r\n                } else {\r\n                  clearInterval(keepAliveTimer);\r\n                }\r\n              }, this.keepAlive);\r\n            }\r\n          }).catch((error: Error) => {\r\n            this.sendError(\r\n              connectionContext,\r\n              opId,\r\n              { message: error.message },\r\n              MessageTypes.GQL_CONNECTION_ERROR,\r\n            );\r\n\r\n            // Close the connection with an error code, ws v2 ensures that the\r\n            // connection is cleaned up even when the closing handshake fails.\r\n            // 1011: an unexpected condition prevented the operation from being fulfilled\r\n            // We are using setTimeout because we want the message to be flushed before\r\n            // disconnecting the client\r\n            setTimeout(() => {\r\n              connectionContext.socket.close(1011);\r\n            }, 10);\r\n          });\r\n          break;\r\n\r\n        case MessageTypes.GQL_CONNECTION_TERMINATE:\r\n          connectionContext.socket.close();\r\n          break;\r\n\r\n        case MessageTypes.GQL_START:\r\n          connectionContext.initPromise.then((initResult) => {\r\n            // if we already have a subscription with this id, unsubscribe from it first\r\n            if (connectionContext.operations && connectionContext.operations[opId]) {\r\n              this.unsubscribe(connectionContext, opId);\r\n            }\r\n\r\n            const baseParams: ExecutionParams = {\r\n              query: parsedMessage.payload.query,\r\n              variables: parsedMessage.payload.variables,\r\n              operationName: parsedMessage.payload.operationName,\r\n              context: isObject(initResult) ? Object.assign(Object.create(Object.getPrototypeOf(initResult)), initResult) : {},\r\n              formatResponse: <any>undefined,\r\n              formatError: <any>undefined,\r\n              callback: <any>undefined,\r\n              schema: this.schema,\r\n            };\r\n            let promisedParams = Promise.resolve(baseParams);\r\n\r\n            // set an initial mock subscription to only registering opId\r\n            connectionContext.operations[opId] = createEmptyIterable();\r\n\r\n            if (this.onOperation) {\r\n              let messageForCallback: any = parsedMessage;\r\n              promisedParams = Promise.resolve(this.onOperation(messageForCallback, baseParams, connectionContext.socket));\r\n            }\r\n\r\n            return promisedParams.then((params) => {\r\n              if (typeof params !== 'object') {\r\n                const error = `Invalid params returned from onOperation! return values must be an object!`;\r\n                this.sendError(connectionContext, opId, { message: error });\r\n\r\n                throw new Error(error);\r\n              }\r\n\r\n              if (!params.schema) {\r\n                const error = 'Missing schema information. The GraphQL schema should be provided either statically in' +\r\n                  ' the `SubscriptionServer` constructor or as a property on the object returned from onOperation!';\r\n                this.sendError(connectionContext, opId, { message: error });\r\n\r\n                throw new Error(error);\r\n              }\r\n\r\n              const document = typeof baseParams.query !== 'string' ? baseParams.query : parse(baseParams.query);\r\n              let executionPromise: Promise<AsyncIterator<ExecutionResult> | ExecutionResult>;\r\n              const validationErrors = validate(params.schema, document, this.specifiedRules);\r\n\r\n              if ( validationErrors.length > 0 ) {\r\n                executionPromise = Promise.resolve({ errors: validationErrors });\r\n              } else {\r\n                let executor: SubscribeFunction | ExecuteFunction = this.execute;\r\n                if (this.subscribe && isASubscriptionOperation(document, params.operationName)) {\r\n                  executor = this.subscribe;\r\n                }\r\n                executionPromise = Promise.resolve(executor(params.schema,\r\n                  document,\r\n                  this.rootValue,\r\n                  params.context,\r\n                  params.variables,\r\n                  params.operationName));\r\n              }\r\n\r\n              return executionPromise.then((executionResult) => ({\r\n                executionIterable: isAsyncIterable(executionResult) ?\r\n                  executionResult : createAsyncIterator([ executionResult ]),\r\n                params,\r\n              }));\r\n            }).then(({ executionIterable, params }) => {\r\n              forAwaitEach(\r\n                executionIterable as any,\r\n                (value: ExecutionResult) => {\r\n                  let result = value;\r\n\r\n                  if (params.formatResponse) {\r\n                    try {\r\n                      result = params.formatResponse(value, params);\r\n                    } catch (err) {\r\n                      console.error('Error in formatResponse function:', err);\r\n                    }\r\n                  }\r\n\r\n                  this.sendMessage(connectionContext, opId, MessageTypes.GQL_DATA, result);\r\n                })\r\n                .then(() => {\r\n                  this.sendMessage(connectionContext, opId, MessageTypes.GQL_COMPLETE, null);\r\n                })\r\n                .catch((e: Error) => {\r\n                  let error = e;\r\n\r\n                  if (params.formatError) {\r\n                    try {\r\n                      error = params.formatError(e, params);\r\n                    } catch (err) {\r\n                      console.error('Error in formatError function: ', err);\r\n                    }\r\n                  }\r\n\r\n                  // plain Error object cannot be JSON stringified.\r\n                  if (Object.keys(error).length === 0) {\r\n                    error = { name: error.name, message: error.message };\r\n                  }\r\n\r\n                  this.sendError(connectionContext, opId, error);\r\n                });\r\n\r\n              return executionIterable;\r\n            }).then((subscription: ExecutionIterator) => {\r\n              connectionContext.operations[opId] = subscription;\r\n            }).then(() => {\r\n              // NOTE: This is a temporary code to support the legacy protocol.\r\n              // As soon as the old protocol has been removed, this coode should also be removed.\r\n              this.sendMessage(connectionContext, opId, MessageTypes.SUBSCRIPTION_SUCCESS, undefined);\r\n            }).catch((e: any) => {\r\n              if (e.errors) {\r\n                this.sendMessage(connectionContext, opId, MessageTypes.GQL_DATA, { errors: e.errors });\r\n              } else {\r\n                this.sendError(connectionContext, opId, { message: e.message });\r\n              }\r\n\r\n              // Remove the operation on the server side as it will be removed also in the client\r\n              this.unsubscribe(connectionContext, opId);\r\n              return;\r\n            });\r\n          }).catch((error) => {\r\n            // Handle initPromise rejected\r\n            this.sendError(connectionContext, opId, { message: error.message });\r\n            this.unsubscribe(connectionContext, opId);\r\n          });\r\n          break;\r\n\r\n        case MessageTypes.GQL_STOP:\r\n          // Find subscription id. Call unsubscribe.\r\n          this.unsubscribe(connectionContext, opId);\r\n          break;\r\n\r\n        default:\r\n          this.sendError(connectionContext, opId, { message: 'Invalid message type!' });\r\n      }\r\n    };\r\n  }\r\n\r\n  private sendKeepAlive(connectionContext: ConnectionContext): void {\r\n    if (connectionContext.isLegacy) {\r\n      this.sendMessage(connectionContext, undefined, MessageTypes.KEEP_ALIVE, undefined);\r\n    } else {\r\n      this.sendMessage(connectionContext, undefined, MessageTypes.GQL_CONNECTION_KEEP_ALIVE, undefined);\r\n    }\r\n  }\r\n\r\n  private sendMessage(connectionContext: ConnectionContext, opId: string, type: string, payload: any): void {\r\n    const parsedMessage = parseLegacyProtocolMessage(connectionContext, {\r\n      type,\r\n      id: opId,\r\n      payload,\r\n    });\r\n\r\n    if (parsedMessage && connectionContext.socket.readyState === WebSocket.OPEN) {\r\n      connectionContext.socket.send(JSON.stringify(parsedMessage));\r\n    }\r\n  }\r\n\r\n  private sendError(connectionContext: ConnectionContext, opId: string, errorPayload: any,\r\n                    overrideDefaultErrorType?: string): void {\r\n    const sanitizedOverrideDefaultErrorType = overrideDefaultErrorType || MessageTypes.GQL_ERROR;\r\n    if ([\r\n        MessageTypes.GQL_CONNECTION_ERROR,\r\n        MessageTypes.GQL_ERROR,\r\n      ].indexOf(sanitizedOverrideDefaultErrorType) === -1) {\r\n      throw new Error('overrideDefaultErrorType should be one of the allowed error messages' +\r\n        ' GQL_CONNECTION_ERROR or GQL_ERROR');\r\n    }\r\n\r\n    this.sendMessage(\r\n      connectionContext,\r\n      opId,\r\n      sanitizedOverrideDefaultErrorType,\r\n      errorPayload,\r\n    );\r\n  }\r\n}\r\n\r\n"]}