{"version":3,"file":"tests.js","sourceRoot":"","sources":["../../src/test/tests.ts"],"names":[],"mappings":"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","sourcesContent":["// chai style expect().to.be.true violates no-unused-expression\r\n/* tslint:disable:no-unused-expression */\r\n\r\nimport 'mocha';\r\nimport {\r\n  assert,\r\n  expect,\r\n} from 'chai';\r\nimport * as sinon from 'sinon';\r\nimport * as WebSocket from 'ws';\r\nimport { specifiedRules, execute, subscribe } from 'graphql';\r\n\r\nObject.assign(global, {\r\n  WebSocket: WebSocket,\r\n});\r\n\r\nconst wait = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nimport {\r\n  GraphQLObjectType,\r\n  GraphQLSchema,\r\n  GraphQLString,\r\n} from 'graphql';\r\n\r\nimport { PubSub, withFilter } from 'graphql-subscriptions';\r\n\r\nimport MessageTypes  from '../message-types';\r\n\r\nimport {\r\n  GRAPHQL_SUBSCRIPTIONS,\r\n} from '../protocol';\r\n\r\nimport { createServer, IncomingMessage, ServerResponse, Server } from 'http';\r\nimport { SubscriptionServer, ExecutionParams } from '../server';\r\nimport { SubscriptionClient } from '../client';\r\nimport { OperationMessage } from '../server';\r\nimport { $$asyncIterator } from 'iterall';\r\n\r\nconst TEST_PORT = 4953;\r\nconst KEEP_ALIVE_TEST_PORT = TEST_PORT + 1;\r\nconst DELAYED_TEST_PORT = TEST_PORT + 2;\r\nconst RAW_TEST_PORT = TEST_PORT + 4;\r\nconst EVENTS_TEST_PORT = TEST_PORT + 5;\r\nconst ONCONNECT_ERROR_TEST_PORT = TEST_PORT + 6;\r\nconst ERROR_TEST_PORT = TEST_PORT + 7;\r\n\r\nconst SERVER_EXECUTOR_TESTS_PORT = ERROR_TEST_PORT + 8;\r\nconst ACK_ONCONNECTED_TEST_PORT = TEST_PORT + 8;\r\nconst ACK_ONRECONNECTED_TEST_PORT = TEST_PORT + 9;\r\n\r\nconst data: { [key: string]: { [key: string]: string } } = {\r\n  '1': {\r\n    'id': '1',\r\n    'name': 'Dan',\r\n  },\r\n  '2': {\r\n    'id': '2',\r\n    'name': 'Marie',\r\n  },\r\n  '3': {\r\n    'id': '3',\r\n    'name': 'Jessie',\r\n  },\r\n};\r\n\r\nconst userType = new GraphQLObjectType({\r\n  name: 'User',\r\n  fields: {\r\n    id: { type: GraphQLString },\r\n    name: { type: GraphQLString },\r\n  },\r\n});\r\n\r\nconst testPubsub = new PubSub();\r\nconst schema = new GraphQLSchema({\r\n  query: new GraphQLObjectType({\r\n    name: 'Query',\r\n    fields: {\r\n      testString: { type: GraphQLString, resolve: () => 'value' },\r\n    },\r\n  }),\r\n  subscription: new GraphQLObjectType({\r\n    name: 'Subscription',\r\n    fields: {\r\n      user: {\r\n        type: userType,\r\n        // `args` describes the arguments that the `user` query accepts\r\n        args: {\r\n          id: { type: GraphQLString },\r\n        },\r\n        // The resolve function describes how to 'resolve' or fulfill\r\n        // the incoming query.\r\n        // In this case we use the `id` argument from above as a key\r\n        // to get the User from `data`\r\n        resolve: (_, { id }) => {\r\n          return data[id];\r\n        },\r\n        subscribe: () => {\r\n          return testPubsub.asyncIterator('user');\r\n        },\r\n      },\r\n      userFiltered: {\r\n        type: userType,\r\n        args: {\r\n          id: { type: GraphQLString },\r\n        },\r\n        resolve: (_, { id }) => {\r\n          return data[id];\r\n        },\r\n        subscribe: withFilter(() => testPubsub.asyncIterator('userFiltered'),\r\n          (user: any, args: { [key: string]: any }) => {\r\n            return !args['id'] || user.id === parseInt(args['id'], 10);\r\n          }),\r\n      },\r\n      context: {\r\n        type: GraphQLString,\r\n        resolve: (root, args, ctx) => {\r\n          return ctx;\r\n        },\r\n        subscribe: () => {\r\n          return testPubsub.asyncIterator('context');\r\n        },\r\n      },\r\n      error: {\r\n        type: GraphQLString,\r\n        resolve: () => {\r\n          throw new Error('E1');\r\n        },\r\n        subscribe: () => {\r\n          return testPubsub.asyncIterator('error');\r\n        },\r\n      },\r\n    },\r\n  }),\r\n});\r\n\r\nconst subscriptionsPubSub = new PubSub();\r\nconst TEST_PUBLICATION = 'test_publication';\r\nconst subscriptionAsyncIteratorSpy = sinon.spy();\r\nconst resolveAsyncIteratorSpy = sinon.spy();\r\n\r\nconst subscriptionsSchema = new GraphQLSchema({\r\n  query: new GraphQLObjectType({\r\n    name: 'Query',\r\n    fields: {\r\n      testString: { type: GraphQLString, resolve: () => 'value' },\r\n    },\r\n  }),\r\n  subscription: new GraphQLObjectType({\r\n    name: 'Subscription',\r\n    fields: {\r\n      somethingChanged: {\r\n        type: GraphQLString,\r\n        resolve: payload => {\r\n          resolveAsyncIteratorSpy();\r\n\r\n          return payload;\r\n        },\r\n        subscribe: () => {\r\n          subscriptionAsyncIteratorSpy();\r\n\r\n          return subscriptionsPubSub.asyncIterator(TEST_PUBLICATION);\r\n        },\r\n      },\r\n    },\r\n  }),\r\n});\r\n\r\n// indirect call to support spying\r\nconst handlers = {\r\n  onOperation: (msg: OperationMessage, params: ExecutionParams<any>, webSocketRequest: WebSocket) => {\r\n    return Promise.resolve(Object.assign({}, params, { context: msg.payload.context }));\r\n  },\r\n};\r\n\r\nconst options = {\r\n  schema,\r\n  subscribe,\r\n  execute,\r\n  onOperation: (msg: OperationMessage | any, params: ExecutionParams<any>, webSocketRequest: WebSocket) => {\r\n    return handlers.onOperation(msg, params, webSocketRequest);\r\n  },\r\n};\r\n\r\nconst eventsOptions = {\r\n  schema,\r\n  subscribe,\r\n  execute,\r\n  onOperation: sinon.spy((msg: OperationMessage, params: ExecutionParams<any>, webSocketRequest: WebSocket) => {\r\n    return Promise.resolve(Object.assign({}, params, { context: msg.payload.context }));\r\n  }),\r\n  onOperationComplete: sinon.spy(),\r\n  onConnect: sinon.spy(() => {\r\n    return { test: 'test context' };\r\n  }),\r\n  onDisconnect: sinon.spy(),\r\n};\r\n\r\nconst onConnectErrorOptions = {\r\n  schema,\r\n  subscribe,\r\n  execute,\r\n  isLegacy: true,\r\n  onConnect: (msg: any, connection: any, connectionContext: any) => {\r\n    connectionContext.isLegacy = onConnectErrorOptions.isLegacy;\r\n    throw new Error('Error');\r\n  },\r\n};\r\n\r\nfunction notFoundRequestListener(request: IncomingMessage, response: ServerResponse) {\r\n  response.writeHead(404);\r\n  response.end();\r\n}\r\n\r\nconst httpServer = createServer(notFoundRequestListener);\r\nhttpServer.listen(TEST_PORT);\r\nnew SubscriptionServer(options, { server: httpServer });\r\n\r\nconst httpServerWithKA = createServer(notFoundRequestListener);\r\nhttpServerWithKA.listen(KEEP_ALIVE_TEST_PORT);\r\nnew SubscriptionServer(Object.assign({}, options, { keepAlive: 500 }), { server: httpServerWithKA });\r\n\r\nconst httpServerWithEvents = createServer(notFoundRequestListener);\r\nhttpServerWithEvents.listen(EVENTS_TEST_PORT);\r\nconst eventsServer = new SubscriptionServer(eventsOptions, { server: httpServerWithEvents });\r\n\r\nconst httpServerWithOnConnectError = createServer(notFoundRequestListener);\r\nhttpServerWithOnConnectError.listen(ONCONNECT_ERROR_TEST_PORT);\r\nnew SubscriptionServer(onConnectErrorOptions, { server: httpServerWithOnConnectError });\r\n\r\nconst httpServerWithDelay = createServer(notFoundRequestListener);\r\nhttpServerWithDelay.listen(DELAYED_TEST_PORT);\r\nnew SubscriptionServer(Object.assign({}, options, {\r\n  onOperation: (msg: OperationMessage, params: ExecutionParams<any>): Promise<any> => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        resolve(Object.assign({}, params, { context: msg.payload.context }));\r\n      }, 100);\r\n    });\r\n  },\r\n}), { server: httpServerWithDelay });\r\n\r\nconst httpServerRaw = createServer(notFoundRequestListener);\r\nhttpServerRaw.listen(RAW_TEST_PORT);\r\n\r\ndescribe('Client', function () {\r\n\r\n  let wsServer: WebSocket.Server;\r\n\r\n  beforeEach(() => {\r\n    wsServer = new WebSocket.Server({\r\n      server: httpServerRaw,\r\n    });\r\n  });\r\n\r\n  afterEach(() => {\r\n    if (wsServer) {\r\n      wsServer.close();\r\n    }\r\n  });\r\n\r\n  it('should send GQL_CONNECTION_INIT message when creating the connection', (done) => {\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        const parsedMessage = JSON.parse(message);\r\n        expect(parsedMessage.type).to.equals(MessageTypes.GQL_CONNECTION_INIT);\r\n        done();\r\n      });\r\n    });\r\n\r\n    new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`);\r\n  });\r\n\r\n  it('should subscribe once after reconnect', (done) => {\r\n    let isClientReconnected = false;\r\n    let subscriptionsCount = 0;\r\n\r\n    wsServer.on('headers', () => {\r\n      if (!isClientReconnected) {\r\n        isClientReconnected = true;\r\n        const stop = Date.now() + 1100;\r\n        while (Date.now() < stop) {\r\n          // busy wait\r\n        }\r\n      }\r\n    });\r\n\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        const parsedMessage = JSON.parse(message);\r\n\r\n        if (parsedMessage.type === MessageTypes.GQL_START) {\r\n          subscriptionsCount++;\r\n        }\r\n      });\r\n    });\r\n\r\n    const client = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`, {\r\n      reconnect: true,\r\n      reconnectionAttempts: 1,\r\n    });\r\n\r\n    client.request({\r\n      query: `subscription useInfo {\r\n        user(id: 3) {\r\n          id\r\n          name\r\n        }\r\n      }`,\r\n    }).subscribe({});\r\n\r\n    setTimeout(() => {\r\n      expect(subscriptionsCount).to.be.equal(1);\r\n      done();\r\n    }, 1500);\r\n  });\r\n\r\n  it('should send GQL_CONNECTION_INIT message first, then the GQL_START message', (done) => {\r\n    let initReceived = false;\r\n\r\n    let sub: any;\r\n    const client = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`);\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        const parsedMessage = JSON.parse(message);\r\n        // mock server\r\n        if (parsedMessage.type === MessageTypes.GQL_CONNECTION_INIT) {\r\n          connection.send(JSON.stringify({ type: MessageTypes.GQL_CONNECTION_ACK, payload: {} }));\r\n          initReceived = true;\r\n        }\r\n        if (parsedMessage.type === MessageTypes.GQL_START) {\r\n          expect(initReceived).to.be.true;\r\n          if ( sub ) {\r\n            sub.unsubscribe();\r\n            done();\r\n          } else {\r\n            done(new Error('did not get subscription'));\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    sub = client.request({\r\n      query: `subscription useInfo {\r\n        user(id: 3) {\r\n          id\r\n          name\r\n        }\r\n      }`,\r\n    }).subscribe({});\r\n  });\r\n\r\n  it('should emit connect event for client side when socket is open', (done) => {\r\n    const client = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n\r\n    const unregister = client.onConnected(() => {\r\n      unregister();\r\n      done();\r\n    });\r\n  });\r\n\r\n  it('should emit disconnect event for client side when socket closed', (done) => {\r\n    const client = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`, {\r\n      connectionCallback: () => {\r\n        client.client.close();\r\n      },\r\n    });\r\n\r\n    const unregister = client.onDisconnected(() => {\r\n      unregister();\r\n      done();\r\n    });\r\n  });\r\n\r\n  it('should emit reconnect event for client side when socket closed', (done) => {\r\n    const client = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`, {\r\n      reconnect: true,\r\n      reconnectionAttempts: 1,\r\n      connectionCallback: () => {\r\n        client.client.close();\r\n      },\r\n    });\r\n\r\n    const unregister = client.onReconnected(() => {\r\n      unregister();\r\n      done();\r\n    });\r\n  });\r\n\r\n  it('should emit connected event for client side when socket closed', (done) => {\r\n    const client = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n    const onConnectingSpy = sinon.spy();\r\n    const unregisterOnConnecting = client.onConnecting(onConnectingSpy);\r\n\r\n    const unregister = client.onConnected(() => {\r\n      unregisterOnConnecting();\r\n      unregister();\r\n      expect(onConnectingSpy.called).to.equal(true);\r\n      done();\r\n    });\r\n  });\r\n\r\n  it('should emit connecting event for client side when socket closed', (done) => {\r\n    const subscriptionsClient = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n    const onConnectedSpy = sinon.spy();\r\n    const unregisterOnConnected = subscriptionsClient.onConnected(onConnectedSpy);\r\n    const unregisterOnConnecting = subscriptionsClient.onConnecting(() => {\r\n      unregisterOnConnecting();\r\n      unregisterOnConnected();\r\n      expect(onConnectedSpy.called).to.equal(false);\r\n      done();\r\n    });\r\n  });\r\n\r\n  it('should emit disconnected event for client side when socket closed', (done) => {\r\n    const client = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`, {\r\n      connectionCallback: () => {\r\n        client.client.close();\r\n      },\r\n    });\r\n\r\n    const unregister = client.onDisconnected(() => {\r\n      unregister();\r\n      done();\r\n    });\r\n  });\r\n\r\n  it('should emit reconnected event for client side when socket closed', (done) => {\r\n    const client = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`, {\r\n      reconnect: true,\r\n      reconnectionAttempts: 1,\r\n      connectionCallback: () => {\r\n        client.client.close();\r\n      },\r\n    });\r\n    const onReconnectingSpy = sinon.spy();\r\n    const unregisterOnReconnecting = client.onReconnecting(onReconnectingSpy);\r\n\r\n    const unregister = client.onReconnected(() => {\r\n      unregisterOnReconnecting();\r\n      unregister();\r\n      expect(onReconnectingSpy.called).to.equal(true);\r\n      done();\r\n    });\r\n  });\r\n\r\n  it('should emit reconnecting event for client side when socket closed', (done) => {\r\n    const subscriptionsClient = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`, {\r\n      reconnect: true,\r\n      reconnectionAttempts: 1,\r\n      connectionCallback: () => {\r\n        subscriptionsClient.client.close();\r\n      },\r\n    });\r\n    const onReconnectedSpy = sinon.spy();\r\n    const unregisterOnReconnected = subscriptionsClient.onReconnected(onReconnectedSpy);\r\n    const unregisterOnReconnecting = subscriptionsClient.onReconnecting(() => {\r\n      unregisterOnReconnecting();\r\n      unregisterOnReconnected();\r\n      expect(onReconnectedSpy.called).to.equal(false);\r\n      done();\r\n    });\r\n  });\r\n\r\n  it('should throw an exception when query is not provided', (done) => {\r\n    const client = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n\r\n    client.request({\r\n        query: undefined,\r\n        operationName: 'useInfo',\r\n        variables: {\r\n          id: 3,\r\n        },\r\n      }).subscribe({\r\n        next: () => assert(false),\r\n        error: (error) => {\r\n          client.close();\r\n          expect(error.message).to.be.equal('Must provide a query.');\r\n          done();\r\n        },\r\n      });\r\n  });\r\n\r\n  it('should throw an exception when query is not valid', (done) => {\r\n    const client = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n\r\n    client.request({\r\n        query: <string>{},\r\n        operationName: 'useInfo',\r\n        variables: {\r\n          id: 3,\r\n        },\r\n      }).subscribe({\r\n        next: () => assert(false),\r\n        error: () => {\r\n          client.close();\r\n          done();\r\n        },\r\n      });\r\n  });\r\n\r\n  it('should allow both data and errors on GQL_DATA', (done) => {\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        const parsedMessage = JSON.parse(message);\r\n        // mock server\r\n        if (parsedMessage.type === MessageTypes.GQL_CONNECTION_INIT) {\r\n          connection.send(JSON.stringify({ type: MessageTypes.GQL_CONNECTION_ACK, payload: {} }));\r\n        }\r\n        if (parsedMessage.type === MessageTypes.GQL_START) {\r\n          const dataMessage = {\r\n            type: MessageTypes.GQL_DATA,\r\n            id: parsedMessage.id,\r\n            payload: {\r\n              data: {\r\n                some: 'data',\r\n              },\r\n              errors: [{\r\n                message: 'Test Error',\r\n              }],\r\n            },\r\n          };\r\n          connection.send(JSON.stringify(dataMessage));\r\n        }\r\n      });\r\n    });\r\n\r\n    const client = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`);\r\n\r\n    client.request(\r\n      {\r\n        query: `subscription useInfo($id: String) {\r\n          user(id: $id) {\r\n            id\r\n            name\r\n          }\r\n        }`,\r\n        operationName: 'useInfo',\r\n        variables: {\r\n          id: 3,\r\n        },\r\n      }).subscribe({\r\n        next: (result) => {\r\n          expect(result.data).to.have.property('some');\r\n          expect(result.errors).to.be.lengthOf(1);\r\n          done();\r\n        },\r\n      });\r\n  });\r\n\r\n  it('should send connectionParams along with init message', (done) => {\r\n    const connectionParams: any = {\r\n      test: true,\r\n    };\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        const parsedMessage = JSON.parse(message);\r\n        expect(JSON.stringify(parsedMessage.payload)).to.equal(JSON.stringify(connectionParams));\r\n        done();\r\n      });\r\n    });\r\n\r\n    new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`, {\r\n      connectionParams: connectionParams,\r\n    });\r\n  });\r\n\r\n  it('should send connectionParams which resolves from a promise along with init message', (done) => {\r\n    const connectionParams: any = {\r\n      test: true,\r\n    };\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        const parsedMessage = JSON.parse(message);\r\n        expect(JSON.stringify(parsedMessage.payload)).to.equal(JSON.stringify(connectionParams));\r\n        done();\r\n      });\r\n    });\r\n\r\n    new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`, {\r\n      connectionParams: new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve(connectionParams);\r\n        }, 100);\r\n      }),\r\n    });\r\n  });\r\n\r\n  it('should send connectionParams as a function which returns a promise along with init message', (done) => {\r\n    const connectionParams: any = {\r\n      test: true,\r\n    };\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        const parsedMessage = JSON.parse(message);\r\n        expect(JSON.stringify(parsedMessage.payload)).to.equal(JSON.stringify(connectionParams));\r\n        done();\r\n      });\r\n    });\r\n\r\n    new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`, {\r\n      connectionParams: new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve(connectionParams);\r\n        }, 100);\r\n      }),\r\n    });\r\n  });\r\n\r\n  it('should catch errors in connectionParams which came from a promise', (done) => {\r\n    const error = 'foo';\r\n\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        const parsedMessage = JSON.parse(message);\r\n        expect(parsedMessage.payload).to.equal(error);\r\n        done();\r\n      });\r\n    });\r\n\r\n    new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`, {\r\n      connectionParams: new Promise((_, reject) => {\r\n        setTimeout(() => {\r\n          reject(error);\r\n        }, 100);\r\n      }),\r\n    });\r\n  });\r\n\r\n  it('should override OperationOptions with middleware', function (done) {\r\n    const client3 = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n    let asyncFunc = (next: any) => {\r\n      setTimeout(() => {\r\n        next();\r\n      }, 100);\r\n    };\r\n    let spyApplyMiddlewareAsyncContents = sinon.spy(asyncFunc);\r\n    let middleware = {\r\n      applyMiddleware(opts: any, next: any) {\r\n        spyApplyMiddlewareAsyncContents(next);\r\n      },\r\n    };\r\n    let spyApplyMiddlewareFunction = sinon.spy(middleware, 'applyMiddleware');\r\n    client3.use([ middleware ]);\r\n\r\n    client3.request({\r\n        query: `subscription useInfo($id: String) {\r\n            user(id: $id) {\r\n              id\r\n              name\r\n            }\r\n          }`,\r\n        operationName: 'useInfo',\r\n        variables: {\r\n          id: '3',\r\n        },\r\n      }).subscribe({\r\n        next: (result: any) => {\r\n          try {\r\n            client3.unsubscribeAll();\r\n            if (result.errors) {\r\n              assert(false, 'got error during subscription creation');\r\n            }\r\n\r\n            if (result.data) {\r\n              assert.equal(spyApplyMiddlewareFunction.called, true);\r\n              assert.equal(spyApplyMiddlewareAsyncContents.called, true);\r\n            }\r\n            done();\r\n          } catch (e) {\r\n            done(e);\r\n          }\r\n        },\r\n        error: (e) => done(e),\r\n      });\r\n\r\n    setTimeout(() => {\r\n      testPubsub.publish('user', {});\r\n    }, 200);\r\n  });\r\n\r\n  it('should handle correctly GQL_CONNECTION_ERROR message', (done) => {\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        connection.send(JSON.stringify({\r\n          type: MessageTypes.GQL_CONNECTION_ERROR,\r\n          payload: { message: 'test error' },\r\n        }));\r\n      });\r\n    });\r\n\r\n    new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`, {\r\n      connectionCallback: (error: any) => {\r\n        expect(error.message).to.equals('test error');\r\n        done();\r\n      },\r\n    });\r\n  });\r\n\r\n  it('should handle connection_error message and handle server that closes connection', (done) => {\r\n    let client: any = null;\r\n\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        connection.send(JSON.stringify({\r\n          type: MessageTypes.GQL_CONNECTION_ERROR,\r\n          payload: { message: 'test error' },\r\n        }), () => {\r\n          connection.close();\r\n\r\n          setTimeout(() => {\r\n            expect(client.status).to.equals(WebSocket.CLOSED);\r\n            done();\r\n          }, 500);\r\n        });\r\n      });\r\n    });\r\n\r\n    client = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`);\r\n  });\r\n\r\n  it('should handle correctly GQL_CONNECTION_ACK message', (done) => {\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        connection.send(JSON.stringify({ type: MessageTypes.GQL_CONNECTION_ACK }));\r\n      });\r\n    });\r\n\r\n    new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`, {\r\n      connectionCallback: (error: any) => {\r\n        expect(error).to.equals(undefined);\r\n        done();\r\n      },\r\n    });\r\n  });\r\n\r\n  it('should handle correctly GQL_CONNECTION_ACK payload for onConnected', (done) => {\r\n    const server = createServer(notFoundRequestListener);\r\n    server.listen(ACK_ONCONNECTED_TEST_PORT);\r\n    const wss = new WebSocket.Server({server});\r\n    wss.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        connection.send(JSON.stringify({ type: MessageTypes.GQL_CONNECTION_ACK, payload: {appVersion: '1.0.0'} }));\r\n        wss.close();\r\n      });\r\n    });\r\n\r\n    const client = new SubscriptionClient(`ws://localhost:${ACK_ONCONNECTED_TEST_PORT}/`);\r\n    client.onConnected((payload) => {\r\n      expect(payload.appVersion).to.equal('1.0.0');\r\n      done();\r\n    });\r\n  });\r\n\r\n  it('should handle correctly GQL_CONNECTION_ACK payload for onReconnected', (done) => {\r\n    const server = createServer(notFoundRequestListener);\r\n    server.listen(ACK_ONRECONNECTED_TEST_PORT);\r\n    const wss = new WebSocket.Server({server});\r\n    wss.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        connection.send(JSON.stringify({ type: MessageTypes.GQL_CONNECTION_ACK, payload: {appVersion: '1.0.0'} }));\r\n        wss.close();\r\n      });\r\n    });\r\n\r\n    const client = new SubscriptionClient(`ws://localhost:${ACK_ONRECONNECTED_TEST_PORT}/`, { reconnect: true });\r\n    client.close(false, false);\r\n    client.onReconnected((payload) => {\r\n      expect(payload.appVersion).to.equal('1.0.0');\r\n      done();\r\n    });\r\n  });\r\n\r\n  it('removes subscription when it unsubscribes from it', function () {\r\n    const client = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let sub = client.request({\r\n        query: `subscription useInfo($id: String) {\r\n          user(id: $id) {\r\n            id\r\n            name\r\n          }\r\n        }`,\r\n        operationName: 'useInfo',\r\n        variables: {\r\n          id: 3,\r\n        },\r\n      }).subscribe({\r\n        next: (result: any) => {\r\n          //do nothing\r\n          try {\r\n            sub.unsubscribe();\r\n            expect(Object.keys(client.operations).length).to.equals(0);\r\n            resolve();\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        },\r\n        error: (e) => reject(e),\r\n      });\r\n\r\n      setTimeout(() => {\r\n        testPubsub.publish('user', {});\r\n      }, 100);\r\n    });\r\n  });\r\n\r\n  it('queues messages while websocket is still connecting', function (done) {\r\n    const client = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n\r\n    let sub = client.request({\r\n        query: `subscription useInfo($id: String) {\r\n        user(id: $id) {\r\n          id\r\n          name\r\n        }\r\n      }`,\r\n        operationName: 'useInfo',\r\n        variables: {\r\n          id: 3,\r\n        },\r\n      }).subscribe({});\r\n\r\n    client.onConnecting(() => {\r\n      expect((client as any).unsentMessagesQueue.length).to.equals(1);\r\n      sub.unsubscribe();\r\n\r\n      setTimeout(() => {\r\n        expect((client as any).unsentMessagesQueue.length).to.equals(0);\r\n        done();\r\n      }, 100);\r\n    });\r\n  });\r\n\r\n  it('should call error handler when graphql result has errors', function (done) {\r\n    const client = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n\r\n    setTimeout(() => {\r\n      client.request({\r\n          query: `subscription useInfo{\r\n          error\r\n        }`,\r\n          variables: {},\r\n      }).subscribe({\r\n        next: (result: any) => {\r\n          if (result.errors.length) {\r\n            client.unsubscribeAll();\r\n            done();\r\n            return;\r\n          }\r\n\r\n          if (result) {\r\n            client.unsubscribeAll();\r\n            assert(false);\r\n          }\r\n        },\r\n      });\r\n    }, 100);\r\n\r\n    setTimeout(() => {\r\n      testPubsub.publish('error', {});\r\n    }, 200);\r\n  });\r\n\r\n  it('should call error handler when graphql query is not valid', function (done) {\r\n    const client = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n\r\n    setTimeout(() => {\r\n      client.request({\r\n          query: `subscription useInfo{\r\n          invalid\r\n        }`,\r\n          variables: {},\r\n      }).subscribe({\r\n        next: (result: any) => {\r\n          if (result.errors.length) {\r\n            expect(result.errors[0].message).to.equals('Cannot query field \"invalid\" on type \"Subscription\".');\r\n            done();\r\n          } else {\r\n            assert(false);\r\n          }\r\n        },\r\n      });\r\n    }, 100);\r\n  });\r\n\r\n  function testBadServer(payload: any, errorMessage: string, done: Function) {\r\n    wsServer.on('connection', (connection: WebSocket) => {\r\n      connection.on('message', (message: any) => {\r\n        const parsedMessage = JSON.parse(message);\r\n        if (parsedMessage.type === MessageTypes.GQL_START) {\r\n          connection.send(JSON.stringify({\r\n            type: MessageTypes.GQL_ERROR,\r\n            id: parsedMessage.id,\r\n            payload,\r\n          }));\r\n        }\r\n      });\r\n    });\r\n\r\n    const client = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`);\r\n    client.request({\r\n      query: `\r\n        subscription useInfo{\r\n          invalid\r\n        }\r\n      `,\r\n      variables: {},\r\n    }).subscribe({\r\n      next: () => assert(false),\r\n      error: (error) => {\r\n        expect(error.message).to.equals(errorMessage);\r\n        done();\r\n      },\r\n    });\r\n  }\r\n\r\n  it('should not connect until subscribe is called if lazy mode', (done) => {\r\n    const client: SubscriptionClient = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`, {\r\n      lazy: true,\r\n    });\r\n    expect(client.client).to.be.null;\r\n\r\n    let sub = client.request({\r\n        query: `subscription useInfo($id: String) {\r\n        user(id: $id) {\r\n          id\r\n          name\r\n        }\r\n      }`,\r\n        operationName: 'useInfo',\r\n        variables: {\r\n          id: 3,\r\n        },\r\n      }).subscribe({\r\n        error: (e) => done(e),\r\n      });\r\n\r\n    let isDone = false;\r\n\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', () => {\r\n        if (!isDone) {\r\n          isDone = true;\r\n          try {\r\n            expect(client.client).to.not.be.null;\r\n            sub.unsubscribe();\r\n            done();\r\n          } catch (e) {\r\n            done(e);\r\n          }\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  it('should call the connectionParams function upon connection to get connectionParams if connectionParams is a function', (done) => {\r\n    const connectionParams = sinon.spy(() => ({\r\n      foo: 'bar',\r\n    }));\r\n\r\n    const client: SubscriptionClient = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`, {\r\n      lazy: true,\r\n      connectionParams,\r\n    });\r\n\r\n    let isDone = false\r\n      , sub: any = null;\r\n\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        if (!isDone) {\r\n          isDone = true;\r\n          try {\r\n            const parsedMessage = JSON.parse(message);\r\n            if ( sub ) {\r\n              sub.unsubscribe();\r\n            }\r\n            expect(parsedMessage.payload).to.eql({\r\n              foo: 'bar',\r\n            });\r\n            done();\r\n          } catch (e) {\r\n            done(e);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    sub = client.request({\r\n        query: `subscription useInfo($id: String) {\r\n        user(id: $id) {\r\n          id\r\n          name\r\n        }\r\n      }`,\r\n        operationName: 'useInfo',\r\n        variables: {\r\n          id: 3,\r\n        },\r\n      }).subscribe({});\r\n  });\r\n\r\n\r\n  it('should handle missing errors', function (done) {\r\n    const errorMessage = 'Unknown error';\r\n    const payload = {};\r\n    testBadServer(payload, errorMessage, done);\r\n  });\r\n\r\n  it('should handle errors that are not an array', function (done) {\r\n    const errorMessage = 'Just an error';\r\n    const payload = {\r\n      message: errorMessage,\r\n    };\r\n    testBadServer(payload, errorMessage, done);\r\n  });\r\n\r\n  it('should reconnect to the server', function (done) {\r\n    let connections = 0;\r\n    let client: SubscriptionClient;\r\n    let originalClient: any;\r\n    wsServer.on('connection', (connection: WebSocket) => {\r\n      connection.on('error', (error) => {\r\n        // ignored for testing\r\n      });\r\n      connections += 1;\r\n      if (connections === 1) {\r\n        originalClient.close();\r\n      } else {\r\n        expect(client.client).to.not.be.equal(originalClient);\r\n        done();\r\n      }\r\n    });\r\n    client = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`, { reconnect: true });\r\n    originalClient = client.client;\r\n  });\r\n\r\n  it('should resubscribe after reconnect', function (done) {\r\n    let connections = 0;\r\n    let sub: any;\r\n    let client: SubscriptionClient = null;\r\n    wsServer.on('connection', (connection: WebSocket) => {\r\n      connections += 1;\r\n      connection.on('message', (message: any) => {\r\n        const parsedMessage = JSON.parse(message);\r\n        if (parsedMessage.type === MessageTypes.GQL_START) {\r\n          if (connections === 1) {\r\n            client.client.close();\r\n          } else {\r\n            sub.unsubscribe();\r\n            done();\r\n          }\r\n        }\r\n      });\r\n    });\r\n    client = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`, { reconnect: true });\r\n\r\n    sub = client.request({\r\n      query: `\r\n        subscription useInfo{\r\n          invalid\r\n        }\r\n      `,\r\n      variables: {},\r\n    }).subscribe({\r\n      next: () => {\r\n        assert(false);\r\n      },\r\n    });\r\n  });\r\n\r\n  it('should emit event when an websocket error occurs', function (done) {\r\n    const client = new SubscriptionClient(`ws://127.0.0.1:${ERROR_TEST_PORT}/`);\r\n\r\n    client.request({\r\n      query: `subscription useInfo{\r\n        invalid\r\n      }`,\r\n      variables: {},\r\n    }).subscribe({\r\n      next: () => {\r\n        assert(false);\r\n      },\r\n    });\r\n\r\n    client.onError((err: Error) => {\r\n      expect(err.message).to.be.equal(`connect ECONNREFUSED 127.0.0.1:${ERROR_TEST_PORT}`);\r\n      done();\r\n    });\r\n  });\r\n\r\n  it('should stop trying to reconnect to the server', function (done) {\r\n    wsServer.on('connection', (connection: WebSocket) => {\r\n      connection.close();\r\n    });\r\n    let errorCount = 0;\r\n    const subscriptionsClient = new SubscriptionClient(`ws://127.0.0.1:${RAW_TEST_PORT}/`, {\r\n      timeout: 500,\r\n      reconnect: true,\r\n      reconnectionAttempts: 2,\r\n    });\r\n    subscriptionsClient.onError((error) => {\r\n      expect(error.message).to.contain('A message was not sent');\r\n      errorCount += 1;\r\n    });\r\n    const connectSpy = sinon.spy(subscriptionsClient as any, 'connect');\r\n\r\n    setTimeout(() => {\r\n      expect(connectSpy.callCount).to.be.equal(2);\r\n      expect(errorCount).to.be.equal(1);\r\n      done();\r\n    }, 1500);\r\n  });\r\n\r\n  it('should stop trying to reconnect to the server if it does not receives the ack', function (done) {\r\n    const subscriptionsClient = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`, {\r\n      timeout: 500,\r\n      reconnect: true,\r\n      reconnectionAttempts: 2,\r\n    });\r\n    const connectSpy = sinon.spy(subscriptionsClient as any, 'connect');\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        const parsedMessage = JSON.parse(message);\r\n        // mock server\r\n        if (parsedMessage.type === MessageTypes.GQL_CONNECTION_INIT) {\r\n          connection.close();\r\n        }\r\n      });\r\n    });\r\n\r\n    setTimeout(() => {\r\n      expect(connectSpy.callCount).to.be.equal(2);\r\n      done();\r\n    }, 1500);\r\n  });\r\n\r\n  it('should keep trying to reconnect if receives the ack from the server', function (done) {\r\n    const subscriptionsClient = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`, {\r\n      timeout: 500,\r\n      reconnect: true,\r\n      reconnectionAttempts: 2,\r\n    });\r\n    const connectSpy = sinon.spy(subscriptionsClient as any, 'connect');\r\n    let connections = 0;\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        const parsedMessage = JSON.parse(message);\r\n        // mock server\r\n        if (parsedMessage.type === MessageTypes.GQL_CONNECTION_INIT) {\r\n          ++connections;\r\n          connection.send(JSON.stringify({ type: MessageTypes.GQL_CONNECTION_ACK, payload: {} }));\r\n          connection.close();\r\n        }\r\n      });\r\n    });\r\n\r\n    setTimeout(() => {\r\n      expect(connections).to.be.greaterThan(3);\r\n      expect(connectSpy.callCount).to.be.greaterThan(2);\r\n      wsServer.close();\r\n      done();\r\n    }, 1900);\r\n  });\r\n\r\n  it('should take care of received keep alive', (done) => {\r\n    let wasKAReceived = false;\r\n\r\n    const subscriptionsClient = new SubscriptionClient(`ws://localhost:${KEEP_ALIVE_TEST_PORT}/`, { timeout: 600 });\r\n    const originalProcessReceivedData = subscriptionsClient.processReceivedData;\r\n    subscriptionsClient.processReceivedData = (receivedData: any) => {\r\n      let receivedDataParsed = JSON.parse(receivedData);\r\n      if (receivedDataParsed.type === MessageTypes.GQL_CONNECTION_KEEP_ALIVE) {\r\n        if (!wasKAReceived) {\r\n          wasKAReceived = true;\r\n          originalProcessReceivedData.call(subscriptionsClient, receivedData);\r\n        }\r\n      }\r\n    };\r\n\r\n    setTimeout(() => {\r\n      expect(wasKAReceived).to.equal(true);\r\n      expect(subscriptionsClient.status).to.equal(WebSocket.CLOSED);\r\n      done();\r\n    }, 1200);\r\n  });\r\n\r\n  it('should correctly clear timeout if receives ka too early', (done) => {\r\n    let receivedKeepAlive = 0;\r\n\r\n    const subscriptionsClient = new SubscriptionClient(`ws://localhost:${KEEP_ALIVE_TEST_PORT}/`, { timeout: 600 });\r\n    const checkConnectionSpy = sinon.spy(subscriptionsClient as any, 'checkConnection');\r\n    const originalProcessReceivedData = subscriptionsClient.processReceivedData;\r\n    subscriptionsClient.processReceivedData = (receivedData: any) => {\r\n      let receivedDataParsed = JSON.parse(receivedData);\r\n      if (receivedDataParsed.type === MessageTypes.GQL_CONNECTION_KEEP_ALIVE) {\r\n        ++receivedKeepAlive;\r\n        originalProcessReceivedData.call(subscriptionsClient, receivedData);\r\n      }\r\n    };\r\n\r\n    setTimeout(() => {\r\n      expect(checkConnectionSpy.callCount).to.be.equal(receivedKeepAlive);\r\n      expect(subscriptionsClient.status).to.be.equal(subscriptionsClient.client.OPEN);\r\n      done();\r\n    }, 1300);\r\n  });\r\n\r\n  it('should take care of invalid message received', (done) => {\r\n    const subscriptionsClient = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`);\r\n    const originalProcessReceivedData = subscriptionsClient.processReceivedData;\r\n    const receivedData = JSON.stringify({ type: 'invalid' });\r\n\r\n    expect(() => {\r\n      originalProcessReceivedData.call(subscriptionsClient, receivedData);\r\n    }).to.throw('Invalid message type!');\r\n    done();\r\n  });\r\n\r\n  it('should throw if received data is not parseable', (done) => {\r\n    const subscriptionsClient = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`);\r\n    const originalProcessReceivedData = subscriptionsClient.processReceivedData;\r\n    const receivedData = 'invalid';\r\n\r\n    expect(() => {\r\n      originalProcessReceivedData.call(subscriptionsClient, receivedData);\r\n    }).to.throw('Message must be parseable. Got: invalid');\r\n    done();\r\n  });\r\n\r\n  it('should not send GQL_STOP on unsubscribe after operation received a GQL_COMPLETE', (done) => {\r\n    const client = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n    const sendMessageSpy = sinon.spy(client as any, 'sendMessage');\r\n\r\n    client.onConnected(() => {\r\n      const subscription = client.request({\r\n        query: `subscription { somethingChanged }`,\r\n        variables: {},\r\n      }).subscribe({\r\n        next: () =>  {\r\n          client.client.onmessage({\r\n            data: JSON.stringify({id: 1, type: MessageTypes.GQL_COMPLETE}),\r\n          });\r\n        },\r\n        complete: () => {\r\n          subscription.unsubscribe();\r\n        },\r\n      });\r\n      setTimeout(() => {\r\n        expect(sendMessageSpy.calledWith(undefined, 'connection_init', sinon.match.any)).to.be.true;\r\n        expect(sendMessageSpy.calledWith('1', 'start', sinon.match.any)).to.be.true;\r\n        expect(sendMessageSpy.calledWith('1', 'stop', sinon.match.any)).to.be.false;\r\n        done();\r\n      }, 1000);\r\n    });\r\n  });\r\n\r\n  it('should delete operation when receive a GQL_COMPLETE', (done) => {\r\n    const subscriptionsClient = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`);\r\n    subscriptionsClient.operations['1'] = {\r\n      options: {\r\n        query: 'invalid',\r\n      },\r\n      handler: () => {\r\n        // nothing\r\n      },\r\n    };\r\n\r\n    const originalProcessReceivedData = subscriptionsClient.processReceivedData;\r\n    const receivedData = JSON.stringify({ id: 1, type: MessageTypes.GQL_COMPLETE });\r\n\r\n    expect(subscriptionsClient.operations).to.have.property('1');\r\n    originalProcessReceivedData.call(subscriptionsClient, receivedData);\r\n    expect(subscriptionsClient.operations).to.not.have.property('1');\r\n    done();\r\n  });\r\n\r\n  it('should force close the connection without tryReconnect', function (done) {\r\n    const subscriptionsClient = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`, {\r\n      reconnect: true,\r\n      reconnectionAttempts: 1,\r\n    });\r\n    const tryReconnectSpy = sinon.spy(subscriptionsClient as any, 'tryReconnect');\r\n    let receivedConnecitonTerminate = false;\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        const parsedMessage = JSON.parse(message);\r\n        // mock server\r\n        if (parsedMessage.type === MessageTypes.GQL_CONNECTION_INIT) {\r\n          connection.send(JSON.stringify({ type: MessageTypes.GQL_CONNECTION_ACK, payload: {} }));\r\n        }\r\n\r\n        if (parsedMessage.type === MessageTypes.GQL_CONNECTION_TERMINATE) {\r\n          receivedConnecitonTerminate = true;\r\n        }\r\n      });\r\n    });\r\n\r\n    const originalProcessReceivedData = subscriptionsClient.processReceivedData;\r\n    subscriptionsClient.processReceivedData = (receivedData: any) => {\r\n      let receivedDataParsed = JSON.parse(receivedData);\r\n      if (receivedDataParsed.type === MessageTypes.GQL_CONNECTION_ACK) {\r\n        originalProcessReceivedData.call(subscriptionsClient, receivedData);\r\n        subscriptionsClient.close();\r\n      }\r\n    };\r\n\r\n    setTimeout(() => {\r\n      expect(receivedConnecitonTerminate).to.be.equal(true);\r\n      expect(tryReconnectSpy.callCount).to.be.equal(0);\r\n      expect(subscriptionsClient.status).to.be.equal(WebSocket.CLOSED);\r\n      done();\r\n    }, 500);\r\n  });\r\n\r\n  it('should close the connection without sent connection terminate and reconnect', function (done) {\r\n    const subscriptionsClient = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`, {\r\n      reconnect: true,\r\n      reconnectionAttempts: 1,\r\n    });\r\n    const tryReconnectSpy = sinon.spy(subscriptionsClient as any, 'tryReconnect');\r\n    let receivedConnecitonTerminate = false;\r\n    wsServer.on('connection', (connection: any) => {\r\n      connection.on('message', (message: any) => {\r\n        const parsedMessage = JSON.parse(message);\r\n        // mock server\r\n        if (parsedMessage.type === MessageTypes.GQL_CONNECTION_INIT) {\r\n          connection.send(JSON.stringify({ type: MessageTypes.GQL_CONNECTION_ACK, payload: {} }));\r\n        }\r\n\r\n        if (parsedMessage.type === MessageTypes.GQL_CONNECTION_TERMINATE) {\r\n          receivedConnecitonTerminate = true;\r\n        }\r\n      });\r\n    });\r\n\r\n    const originalProcessReceivedData = subscriptionsClient.processReceivedData;\r\n    subscriptionsClient.processReceivedData = (dataReceived: any) => {\r\n      let receivedDataParsed = JSON.parse(dataReceived);\r\n      if (receivedDataParsed.type === MessageTypes.GQL_CONNECTION_ACK) {\r\n        originalProcessReceivedData.call(subscriptionsClient, dataReceived);\r\n        subscriptionsClient.close(false);\r\n        subscriptionsClient.processReceivedData = originalProcessReceivedData;\r\n      }\r\n    };\r\n\r\n    setTimeout(() => {\r\n      expect(tryReconnectSpy.callCount).to.be.equal(1);\r\n      expect(subscriptionsClient.status).to.be.equal(WebSocket.OPEN);\r\n      expect(receivedConnecitonTerminate).to.be.equal(false);\r\n      done();\r\n    }, 500);\r\n  });\r\n\r\n  it('should close the connection after inactivityTimeout and zero active subscriptions', function (done) {\r\n    const subscriptionsClient = new SubscriptionClient(`ws://localhost:${RAW_TEST_PORT}/`, {\r\n      inactivityTimeout: 100,\r\n    });\r\n    const sub = subscriptionsClient.request({\r\n      query: `subscription useInfo($id: String) {\r\n        user(id: $id) {\r\n          id\r\n          name\r\n        }\r\n      }`,\r\n      operationName: 'useInfo',\r\n      variables: {\r\n        id: 3,\r\n      },\r\n    }).subscribe({});\r\n\r\n    setTimeout(() => {\r\n      expect(Object.keys(subscriptionsClient.operations).length).to.be.equal(1);\r\n      sub.unsubscribe();\r\n      setTimeout(() => {\r\n        expect(Object.keys(subscriptionsClient.operations).length).to.be.equal(0);\r\n        setTimeout(() => {\r\n          expect(subscriptionsClient.status).to.be.equal(WebSocket.CLOSED);\r\n          done();\r\n        }, 101);\r\n      }, 50);\r\n    }, 50);\r\n  });\r\n\r\n  it('should allow passing custom WebSocket protocols', () => {\r\n    const testCases = ['custom-protocol', ['custom', 'protocols']];\r\n\r\n    for (const testCase of testCases) {\r\n      const mockWebSocket = sinon.spy();\r\n      new SubscriptionClient(`ws://localhost:${TEST_PORT}`, {}, mockWebSocket, testCase);\r\n      expect(mockWebSocket.calledOnce).to.be.true;\r\n      expect(mockWebSocket.firstCall.args[1]).to.equal(testCase);\r\n    }\r\n  });\r\n});\r\n\r\ndescribe('Server', function () {\r\n  let onOperationSpy: any;\r\n  let server: Server;\r\n\r\n  beforeEach(() => {\r\n    onOperationSpy = sinon.spy(handlers, 'onOperation');\r\n  });\r\n\r\n  afterEach(() => {\r\n    if (server) {\r\n      server.close();\r\n    }\r\n\r\n    if (onOperationSpy) {\r\n      onOperationSpy.restore();\r\n    }\r\n\r\n    if (eventsOptions) {\r\n      eventsOptions.onConnect.resetHistory();\r\n      eventsOptions.onDisconnect.resetHistory();\r\n      eventsOptions.onOperation.resetHistory();\r\n      eventsOptions.onOperationComplete.resetHistory();\r\n    }\r\n  });\r\n\r\n  it('should throw an exception when creating a server without execute', () => {\r\n    expect(() => {\r\n      new SubscriptionServer({ execute: undefined }, { server: httpServer });\r\n    }).to.throw();\r\n  });\r\n\r\n  it('should throw an exception when creating a server with subscribe only', () => {\r\n    expect(() => {\r\n      new SubscriptionServer({ subscribe: {} as any }, { server: httpServer });\r\n    }).to.throw();\r\n  });\r\n\r\n  it('should throw an exception when execute is missing', () => {\r\n    expect(() => {\r\n      new SubscriptionServer({}, { server: httpServer });\r\n    }).to.throw();\r\n  });\r\n\r\n  it('should throw an exception when schema is not provided', (done) => {\r\n    server = createServer(notFoundRequestListener);\r\n    server.listen(SERVER_EXECUTOR_TESTS_PORT);\r\n\r\n    SubscriptionServer.create({\r\n      execute,\r\n    }, {\r\n      server,\r\n      path: '/',\r\n    });\r\n\r\n    let errorMessage: string;\r\n\r\n    const client = new SubscriptionClient(`ws://localhost:${SERVER_EXECUTOR_TESTS_PORT}/`);\r\n    client.onConnected(() => {\r\n      client.request({\r\n        query: `query { testString }`,\r\n        variables: {},\r\n      }).subscribe({\r\n        next: (res) => {\r\n          assert(false, 'expected error to be thrown');\r\n        },\r\n        error: (err) => {\r\n          errorMessage = err.message;\r\n          expect(errorMessage).to.contain('Missing schema information');\r\n          done();\r\n        },\r\n        complete: () => {\r\n          assert(false, 'expected error to be thrown');\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  it('should use schema provided in onOperation', (done) => {\r\n    server = createServer(notFoundRequestListener);\r\n    server.listen(SERVER_EXECUTOR_TESTS_PORT);\r\n\r\n    SubscriptionServer.create({\r\n      execute,\r\n      onOperation: () => {\r\n        return {\r\n          schema,\r\n        };\r\n      },\r\n    }, {\r\n      server,\r\n      path: '/',\r\n    });\r\n\r\n    let msgCnt = 0;\r\n\r\n    const client = new SubscriptionClient(`ws://localhost:${SERVER_EXECUTOR_TESTS_PORT}/`);\r\n    client.onConnected(() => {\r\n      client.request({\r\n        query: `query { testString }`,\r\n        variables: {},\r\n      }).subscribe({\r\n        next: (res) => {\r\n          if ( res.errors ) {\r\n            assert(false, 'unexpected error from request');\r\n          }\r\n\r\n          expect(res.data).to.deep.equal({ testString: 'value' });\r\n          msgCnt ++;\r\n        },\r\n        error: (err) => {\r\n          assert(false, 'unexpected error from request');\r\n        },\r\n        complete: () => {\r\n          expect(msgCnt).to.equals(1);\r\n          done();\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  it('should accept execute method than returns a Promise (original execute)', (done) => {\r\n    server = createServer(notFoundRequestListener);\r\n    server.listen(SERVER_EXECUTOR_TESTS_PORT);\r\n    let msgCnt = 0;\r\n\r\n    SubscriptionServer.create({\r\n      schema,\r\n      execute,\r\n    }, {\r\n      server,\r\n      path: '/',\r\n    });\r\n\r\n    const client = new SubscriptionClient(`ws://localhost:${SERVER_EXECUTOR_TESTS_PORT}/`);\r\n    client.onConnected(() => {\r\n      client.request({\r\n        query: `query { testString }`,\r\n        variables: {},\r\n      }).subscribe({\r\n        next: (res) => {\r\n          if ( res.errors ) {\r\n            assert(false, 'unexpected error from request');\r\n          }\r\n\r\n          expect(res.data).to.deep.equal({ testString: 'value' });\r\n          msgCnt ++;\r\n        },\r\n        error: (err) => {\r\n          assert(false, 'unexpected error from request');\r\n        },\r\n        complete: () => {\r\n          expect(msgCnt).to.equals(1);\r\n          done();\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  it('server close should work', (done) => {\r\n    server = createServer(notFoundRequestListener);\r\n    server.listen(SERVER_EXECUTOR_TESTS_PORT);\r\n\r\n    const subServer = SubscriptionServer.create({\r\n      schema,\r\n      execute,\r\n    }, {\r\n      server,\r\n      path: '/',\r\n    });\r\n\r\n    const client = new SubscriptionClient(`ws://localhost:${SERVER_EXECUTOR_TESTS_PORT}/`);\r\n    client.onDisconnected(() => {\r\n      done();\r\n    });\r\n\r\n    client.onConnected(() => {\r\n      client.request({\r\n        query: `query { testString }`,\r\n        variables: {},\r\n      }).subscribe({\r\n        next: (res) => {\r\n          if (res.errors) {\r\n            assert(false, 'unexpected error from request');\r\n          } else {\r\n            expect(res.data).to.deep.equal({ testString: 'value' });\r\n          }\r\n        },\r\n        complete: () => subServer.close(),\r\n      });\r\n    });\r\n  });\r\n\r\n  it('should have request interface (apollo client 2.0)', (done) => {\r\n    server = createServer(notFoundRequestListener);\r\n    server.listen(SERVER_EXECUTOR_TESTS_PORT);\r\n\r\n    SubscriptionServer.create({\r\n      schema,\r\n      execute,\r\n    }, {\r\n      server,\r\n      path: '/',\r\n    });\r\n\r\n    const client = new SubscriptionClient(`ws://localhost:${SERVER_EXECUTOR_TESTS_PORT}/`);\r\n    client.onConnected(() => {\r\n      let hasValue = false;\r\n\r\n      client.request({\r\n        query: `query { testString }`,\r\n        variables: {},\r\n      }).subscribe({\r\n        next: (res) => {\r\n          expect(hasValue).to.equal(false);\r\n          expect(res).to.deep.equal({ data: { testString: 'value' } });\r\n          hasValue = true;\r\n        },\r\n        error: (err) => {\r\n          done(new Error('unexpected error from subscribe'));\r\n        },\r\n        complete: () => {\r\n          if ( false === hasValue ) {\r\n            return done(new Error('No value recived from observable'));\r\n          }\r\n          done();\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  it('should accept execute method than returns an AsyncIterator', (done) => {\r\n    server = createServer(notFoundRequestListener);\r\n    server.listen(SERVER_EXECUTOR_TESTS_PORT);\r\n\r\n    const executeWithAsyncIterable = () => {\r\n      let called = false;\r\n\r\n      return {\r\n        next() {\r\n          if (called === true) {\r\n            return this.return();\r\n          }\r\n\r\n          called = true;\r\n\r\n          return Promise.resolve({ value: { data: { testString: 'value' } }, done: false });\r\n        },\r\n        return() {\r\n          return Promise.resolve({ value: undefined, done: true });\r\n        },\r\n        throw(e: Error) {\r\n          return Promise.reject(e);\r\n        },\r\n        [$$asyncIterator]() {\r\n          return this;\r\n        },\r\n      };\r\n    };\r\n\r\n    SubscriptionServer.create({\r\n      schema,\r\n      execute: executeWithAsyncIterable,\r\n    }, {\r\n      server,\r\n      path: '/',\r\n    });\r\n\r\n    const client = new SubscriptionClient(`ws://localhost:${SERVER_EXECUTOR_TESTS_PORT}/`);\r\n    client.onConnected(() => {\r\n      client.request({\r\n        query: `query { testString }`,\r\n        variables: {},\r\n      }).subscribe({\r\n        next: (res) => {\r\n          if (res.errors) {\r\n            assert(false, 'unexpected error from request');\r\n          } else {\r\n            expect(res.data).to.deep.equal({ testString: 'value' });\r\n          }\r\n          done();\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  it('should handle socket error and close the connection on error', (done) => {\r\n    const spy = sinon.spy();\r\n\r\n    const httpServerForError = createServer(notFoundRequestListener);\r\n    httpServerForError.listen(ERROR_TEST_PORT);\r\n\r\n    new SubscriptionServer({\r\n      schema,\r\n      execute,\r\n      onConnect: (payload: any, socket: any) => {\r\n        setTimeout(() => {\r\n          socket.emit('error', new Error('test'));\r\n\r\n          setTimeout(() => {\r\n            assert(spy.calledOnce);\r\n            httpServerForError.close();\r\n            done();\r\n          }, 500);\r\n        }, 100);\r\n      },\r\n    }, { server: httpServerForError });\r\n\r\n    const client = new SubscriptionClient(`ws://localhost:${ERROR_TEST_PORT}/`);\r\n    client.onDisconnected(spy);\r\n  });\r\n\r\n  it('should trigger onConnect when client connects and validated', (done) => {\r\n    new SubscriptionClient(`ws://localhost:${EVENTS_TEST_PORT}/`);\r\n\r\n    setTimeout(() => {\r\n      assert(eventsOptions.onConnect.calledOnce);\r\n      done();\r\n    }, 200);\r\n  });\r\n\r\n  it('should trigger onConnect with the correct connectionParams', (done) => {\r\n    const connectionParams: any = {\r\n      test: true,\r\n    };\r\n\r\n    new SubscriptionClient(`ws://localhost:${EVENTS_TEST_PORT}/`, {\r\n      connectionParams: connectionParams,\r\n    });\r\n\r\n    setTimeout(() => {\r\n      assert(eventsOptions.onConnect.calledOnce);\r\n      expect(JSON.stringify(eventsOptions.onConnect.getCall(0).args[0])).to.equal(JSON.stringify(connectionParams));\r\n      done();\r\n    }, 200);\r\n  });\r\n\r\n  it('should trigger onConnect with the request available in ConnectionContext', (done) => {\r\n    new SubscriptionClient(`ws://localhost:${EVENTS_TEST_PORT}/`);\r\n\r\n    setTimeout(() => {\r\n      assert(eventsOptions.onConnect.calledOnce);\r\n      expect(eventsOptions.onConnect.getCall(0).args[2].request).to.be.an.instanceof(IncomingMessage);\r\n      done();\r\n    }, 200);\r\n  });\r\n\r\n  it('should trigger onConnect and return GQL_CONNECTION_ERROR with error', (done) => {\r\n    const connectionCallbackSpy = sinon.spy();\r\n\r\n    onConnectErrorOptions.isLegacy = false;\r\n    const subscriptionsClient = new SubscriptionClient(`ws://localhost:${ONCONNECT_ERROR_TEST_PORT}/`, {\r\n      connectionCallback: connectionCallbackSpy,\r\n    });\r\n\r\n    setTimeout(() => {\r\n      expect(connectionCallbackSpy.calledOnce).to.be.true;\r\n      expect(connectionCallbackSpy.getCall(0).args[0]).to.eql({ message: 'Error' });\r\n      subscriptionsClient.close();\r\n      done();\r\n    }, 200);\r\n  });\r\n\r\n  it('should trigger onConnect and return INIT_FAIL with error', (done) => {\r\n    const connectionCallbackSpy = sinon.spy();\r\n\r\n    onConnectErrorOptions.isLegacy = true;\r\n    const subscriptionsClient = new SubscriptionClient(`ws://localhost:${ONCONNECT_ERROR_TEST_PORT}/`, {\r\n      connectionCallback: connectionCallbackSpy,\r\n    });\r\n\r\n    const originalProcessReceivedData = subscriptionsClient.processReceivedData;\r\n    subscriptionsClient.processReceivedData = (receivedData: any) => {\r\n      let messageData = JSON.parse(receivedData);\r\n      // Reformat message to avoid unknown message type\r\n      if (messageData.type === MessageTypes.INIT_FAIL) {\r\n        messageData.type = MessageTypes.GQL_CONNECTION_ERROR;\r\n      }\r\n      receivedData = JSON.stringify(messageData);\r\n      originalProcessReceivedData.call(subscriptionsClient, receivedData);\r\n    };\r\n\r\n    setTimeout(() => {\r\n      expect(connectionCallbackSpy.calledOnce).to.be.true;\r\n      // Old client used: connectionCallback(parsedMessage.payload.error)\r\n      // But new client uses: connectionCallback(parsedMessage.payload)\r\n      // So check complete payload\r\n      expect(connectionCallbackSpy.getCall(0).args[0]).to.eql({ error: 'Error' });\r\n      subscriptionsClient.close();\r\n      done();\r\n    }, 200);\r\n  });\r\n\r\n  it('should trigger onDisconnect when client disconnects', (done) => {\r\n    const client = new SubscriptionClient(`ws://localhost:${EVENTS_TEST_PORT}/`);\r\n    setTimeout(() => {\r\n      client.client.close();\r\n    }, 100);\r\n    setTimeout(() => {\r\n      assert(eventsOptions.onDisconnect.calledOnce);\r\n      done();\r\n    }, 200);\r\n  });\r\n\r\n  it('should trigger onDisconnect with ConnectionContext as second argument', (done) => {\r\n    const client = new SubscriptionClient(`ws://localhost:${EVENTS_TEST_PORT}/`);\r\n    setTimeout(() => {\r\n      client.client.close();\r\n    }, 100);\r\n    setTimeout(() => {\r\n      assert(eventsOptions.onDisconnect.calledOnce);\r\n      expect(eventsOptions.onConnect.getCall(0).args[1]).to.not.be.undefined;\r\n      done();\r\n    }, 200);\r\n  });\r\n\r\n  it('should call unsubscribe when client closes the connection', (done) => {\r\n    const client = new SubscriptionClient(`ws://localhost:${EVENTS_TEST_PORT}/`);\r\n    const spy = sinon.spy(eventsServer as any, 'unsubscribe');\r\n\r\n    client.request({\r\n        query: `subscription useInfo($id: String) {\r\n        user(id: $id) {\r\n          id\r\n          name\r\n        }\r\n      }`,\r\n        operationName: 'useInfo',\r\n        variables: {\r\n          id: '3',\r\n        },\r\n      }).subscribe({});\r\n\r\n    setTimeout(() => {\r\n      client.client.close();\r\n    }, 500);\r\n\r\n    setTimeout(() => {\r\n      assert(spy.calledOnce);\r\n      done();\r\n    }, 1000);\r\n  });\r\n\r\n  it('should trigger onOperation when client subscribes', (done) => {\r\n    const client = new SubscriptionClient(`ws://localhost:${EVENTS_TEST_PORT}/`);\r\n    client.request({\r\n      query: `subscription useInfo($id: String) {\r\n          user(id: $id) {\r\n            id\r\n            name\r\n          }\r\n        }`,\r\n      operationName: 'useInfo',\r\n      variables: {\r\n        id: '3',\r\n      },\r\n    }).subscribe({\r\n      next: (result: any) => {\r\n        if (result.errors) {\r\n          assert(false);\r\n        }\r\n      },\r\n    });\r\n\r\n    setTimeout(() => {\r\n      assert(eventsOptions.onOperation.calledOnce);\r\n      done();\r\n    }, 200);\r\n  });\r\n\r\n  it('should trigger onOperationComplete when client unsubscribes', (done) => {\r\n    const client = new SubscriptionClient(`ws://localhost:${EVENTS_TEST_PORT}/`);\r\n    const sub = client.request({\r\n      query: `subscription useInfo($id: String) {\r\n          user(id: $id) {\r\n            id\r\n            name\r\n          }\r\n        }`,\r\n      operationName: 'useInfo',\r\n      variables: {\r\n        id: '3',\r\n      },\r\n    }).subscribe({\r\n      next: (result: any) => {\r\n        if (result.errors) {\r\n          sub.unsubscribe();\r\n          assert(false);\r\n          done();\r\n        }\r\n\r\n        if (result.data) {\r\n          sub.unsubscribe();\r\n          setTimeout(() => {\r\n            assert(eventsOptions.onOperationComplete.calledOnce);\r\n            done();\r\n          }, 200);\r\n        }\r\n      },\r\n    });\r\n\r\n    setTimeout(() => {\r\n      testPubsub.publish('user', {});\r\n    }, 100);\r\n  });\r\n\r\n  it('should send correct results to multiple clients with subscriptions', function (done) {\r\n    const client = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n    let client1 = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n\r\n    let numResults = 0;\r\n    setTimeout(() => {\r\n      client.request({\r\n        query: `subscription useInfo($id: String) {\r\n          user(id: $id) {\r\n            id\r\n            name\r\n          }\r\n        }`,\r\n        operationName: 'useInfo',\r\n        variables: {\r\n          id: '3',\r\n        },\r\n\r\n      }).subscribe({\r\n        next: (result: any) => {\r\n          if (result.errors) {\r\n            assert(false);\r\n          }\r\n\r\n          if (result.data) {\r\n            assert.property(result.data, 'user');\r\n            assert.equal(result.data.user.id, '3');\r\n            assert.equal(result.data.user.name, 'Jessie');\r\n            numResults++;\r\n          }\r\n          // if both error and result are null, this was a SUBSCRIPTION_SUCCESS message.\r\n        },\r\n      });\r\n    }, 100);\r\n\r\n    const client11 = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n    let numResults1 = 0;\r\n    setTimeout(function () {\r\n      client11.request({\r\n        query: `subscription useInfo($id: String) {\r\n          user(id: $id) {\r\n            id\r\n            name\r\n          }\r\n        }`,\r\n        operationName: 'useInfo',\r\n        variables: {\r\n          id: '2',\r\n        },\r\n\r\n      }).subscribe({\r\n        next: (result: any) => {\r\n          if (result.errors) {\r\n            assert(false);\r\n          }\r\n          if (result.data) {\r\n            assert.property(result.data, 'user');\r\n            assert.equal(result.data.user.id, '2');\r\n            assert.equal(result.data.user.name, 'Marie');\r\n            numResults1++;\r\n          }\r\n          // if both error and result are null, this was a SUBSCRIPTION_SUCCESS message.\r\n        },\r\n      });\r\n    }, 100);\r\n\r\n    setTimeout(() => {\r\n      testPubsub.publish('user', {});\r\n    }, 200);\r\n\r\n    setTimeout(() => {\r\n      client.unsubscribeAll();\r\n      expect(numResults).to.equals(1);\r\n      client1.unsubscribeAll();\r\n      expect(numResults1).to.equals(1);\r\n      done();\r\n    }, 400);\r\n\r\n  });\r\n\r\n  it('should send a gql_data with errors message to client with invalid query', function (done) {\r\n    const client1 = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n\r\n    setTimeout(function () {\r\n      client1.processReceivedData = (receivedData: any) => {\r\n        let messageData = JSON.parse(receivedData);\r\n\r\n        assert.isTrue(\r\n          messageData.type === MessageTypes.GQL_DATA\r\n          || messageData.type === MessageTypes.GQL_COMPLETE);\r\n\r\n        if (messageData.type === MessageTypes.GQL_COMPLETE) {\r\n          done();\r\n          return;\r\n        }\r\n\r\n        const result = messageData.payload;\r\n        assert.isAbove(result.errors.length, 0, 'Query should\\'ve failed');\r\n      };\r\n\r\n      client1.request({\r\n        query: `subscription useInfo($id: String) {\r\n          user(id: $id) {\r\n            id\r\n            birthday\r\n          }\r\n        }`,\r\n        operationName: 'useInfo',\r\n        variables: {\r\n          id: '3',\r\n        },\r\n      }).subscribe({});\r\n    }, 100);\r\n\r\n  });\r\n\r\n  it('should set up the proper filters when subscribing', function (done) {\r\n    let numTriggers = 0;\r\n    const client3 = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n    const client4 = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n    setTimeout(() => {\r\n      client3.request({\r\n          query: `subscription userInfoFilter1($id: String) {\r\n            userFiltered(id: $id) {\r\n              id\r\n              name\r\n            }\r\n          }`,\r\n          operationName: 'userInfoFilter1',\r\n          variables: {\r\n            id: '3',\r\n          },\r\n        }).subscribe({\r\n          next: (result: any) => {\r\n            if (result.errors) {\r\n              assert(false);\r\n            }\r\n\r\n            if (result.data) {\r\n              numTriggers += 1;\r\n              assert.property(result.data, 'userFiltered');\r\n              assert.equal(result.data.userFiltered.id, '3');\r\n              assert.equal(result.data.userFiltered.name, 'Jessie');\r\n            }\r\n            // both null means it's a SUBSCRIPTION_SUCCESS message\r\n          },\r\n        });\r\n\r\n      client4.request({\r\n          query: `subscription userInfoFilter1($id: String) {\r\n            userFiltered(id: $id) {\r\n              id\r\n              name\r\n            }\r\n          }`,\r\n          operationName: 'userInfoFilter1',\r\n          variables: {\r\n            id: '1',\r\n          },\r\n        }).subscribe({\r\n          next: (result: any) => {\r\n            if (result.errors) {\r\n              assert(false);\r\n            }\r\n            if (result.data) {\r\n              numTriggers += 1;\r\n              assert.property(result.data, 'userFiltered');\r\n              assert.equal(result.data.userFiltered.id, '1');\r\n              assert.equal(result.data.userFiltered.name, 'Dan');\r\n            }\r\n            // both null means SUBSCRIPTION_SUCCESS\r\n          },\r\n        });\r\n    }, 100);\r\n    setTimeout(() => {\r\n      testPubsub.publish('userFiltered', { id: 1 });\r\n      testPubsub.publish('userFiltered', { id: 2 });\r\n      testPubsub.publish('userFiltered', { id: 3 });\r\n    }, 200);\r\n    setTimeout(() => {\r\n      assert.equal(numTriggers, 2);\r\n      done();\r\n    }, 300);\r\n  });\r\n\r\n  it('correctly sets the context in onOperation', function (done) {\r\n    const CTX = 'testContext';\r\n    const client3 = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n    client3.request({\r\n        query: `subscription context {\r\n          context\r\n        }`,\r\n        variables: {},\r\n        context: CTX,\r\n    }).subscribe({\r\n      next: (result: any) => {\r\n        client3.unsubscribeAll();\r\n        if (result.errors) {\r\n          assert(false);\r\n        }\r\n        if (result.data) {\r\n          assert.property(result.data, 'context');\r\n          assert.equal(result.data.context, CTX);\r\n        }\r\n        done();\r\n      },\r\n    });\r\n\r\n    setTimeout(() => {\r\n      testPubsub.publish('context', {});\r\n    }, 100);\r\n  });\r\n\r\n  it('passes through webSocketRequest to onOperation', function (done) {\r\n    const client = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n    client.request({\r\n      query: `\r\n        subscription context {\r\n          context\r\n        }\r\n      `,\r\n      variables: {},\r\n    }).subscribe({});\r\n\r\n    setTimeout(() => {\r\n      client.close();\r\n      assert(onOperationSpy.calledOnce);\r\n      expect(onOperationSpy.getCall(0).args[2]).to.not.be.undefined;\r\n      done();\r\n    }, 100);\r\n  });\r\n\r\n  it('does not send more subscription data after client unsubscribes', function (done) {\r\n    const client4 = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n    let sub: any;\r\n\r\n    setTimeout(() => {\r\n      sub.unsubscribe();\r\n    }, 50);\r\n    setTimeout(() => {\r\n      testPubsub.publish('user', {});\r\n    }, 100);\r\n    setTimeout(() => {\r\n      client4.close();\r\n      done();\r\n    }, 150);\r\n    client4.processReceivedData = (receivedData: any) => {\r\n      if (JSON.parse(receivedData).type === MessageTypes.GQL_DATA) {\r\n        assert(false);\r\n      }\r\n    };\r\n    sub = client4.request({\r\n      query: `subscription useInfo($id: String) {\r\n      user(id: $id) {\r\n        id\r\n        name\r\n      }\r\n    }`,\r\n      operationName: 'useInfo',\r\n      variables: {\r\n        id: '3',\r\n      },\r\n    }).subscribe({});\r\n  });\r\n\r\n  it('rejects a client that does not specify a supported protocol', function (done) {\r\n    const client = new WebSocket(`ws://localhost:${TEST_PORT}/`);\r\n\r\n    client.on('close', (code) => {\r\n      expect(code).to.be.eq(1002);\r\n      done();\r\n    });\r\n  });\r\n\r\n  it('rejects unparsable message', function (done) {\r\n    const client = new WebSocket(`ws://localhost:${TEST_PORT}/`, GRAPHQL_SUBSCRIPTIONS);\r\n    client.onmessage = (message: any) => {\r\n      let messageData = JSON.parse(message.data);\r\n      assert.equal(messageData.type, MessageTypes.GQL_CONNECTION_ERROR);\r\n      assert.isDefined(messageData.payload, 'Number of errors is greater than 0.');\r\n      client.close();\r\n      done();\r\n    };\r\n    client.onopen = () => {\r\n      client.send('HI');\r\n    };\r\n  });\r\n\r\n  it('rejects nonsense message', function (done) {\r\n    const client = new WebSocket(`ws://localhost:${TEST_PORT}/`, GRAPHQL_SUBSCRIPTIONS);\r\n    client.onmessage = (message: any) => {\r\n      let messageData = JSON.parse(message.data);\r\n      assert.equal(messageData.type, MessageTypes.GQL_ERROR);\r\n      assert.isDefined(messageData.payload, 'Number of errors is greater than 0.');\r\n      client.close();\r\n      done();\r\n    };\r\n    client.onopen = () => {\r\n      client.send(JSON.stringify({}));\r\n    };\r\n  });\r\n\r\n  it('does not crash on unsub for Object.prototype member', function (done) {\r\n    // Use websocket because Client.unsubscribe will only take a number.\r\n    const client = new WebSocket(`ws://localhost:${TEST_PORT}/`, GRAPHQL_SUBSCRIPTIONS);\r\n\r\n    client.onopen = () => {\r\n      client.send(JSON.stringify({ type: MessageTypes.GQL_STOP, id: 'toString' }));\r\n      // Strangely we don't send any acknowledgement for unsubbing from an\r\n      // unknown sub, so we just set a timeout and implicitly assert that\r\n      // there's no uncaught exception within the server code.\r\n      setTimeout(done, 10);\r\n    };\r\n  });\r\n\r\n  it('sends back any type of error', function (done) {\r\n    const client = new SubscriptionClient(`ws://localhost:${TEST_PORT}/`);\r\n    client.request({\r\n      query: `invalid useInfo{\r\n          error\r\n        }`,\r\n      variables: {},\r\n    }).subscribe({\r\n      next: () => assert(false),\r\n      error: () => {\r\n        client.unsubscribeAll();\r\n        done();\r\n      },\r\n    });\r\n  });\r\n\r\n  it('sends a keep alive signal in the socket', function (done) {\r\n    let client = new WebSocket(`ws://localhost:${KEEP_ALIVE_TEST_PORT}/`, GRAPHQL_SUBSCRIPTIONS);\r\n    let yieldCount = 0;\r\n    client.onmessage = (message: any) => {\r\n      const parsedMessage = JSON.parse(message.data);\r\n      if (parsedMessage.type === MessageTypes.GQL_CONNECTION_KEEP_ALIVE) {\r\n        yieldCount += 1;\r\n        if (yieldCount > 2) {\r\n          client.close();\r\n          done();\r\n        }\r\n      }\r\n    };\r\n    client.onopen = () => {\r\n      client.send(JSON.stringify({\r\n        id: 1,\r\n        type: MessageTypes.GQL_CONNECTION_INIT,\r\n      }));\r\n    };\r\n  });\r\n\r\n  it('sends legacy keep alive signal in the socket', function (done) {\r\n    let client = new WebSocket(`ws://localhost:${KEEP_ALIVE_TEST_PORT}/`, GRAPHQL_SUBSCRIPTIONS);\r\n    let yieldCount = 0;\r\n    client.onmessage = (message: any) => {\r\n      const parsedMessage = JSON.parse(message.data);\r\n      if (parsedMessage.type === MessageTypes.KEEP_ALIVE) {\r\n        yieldCount += 1;\r\n        if (yieldCount > 2) {\r\n          client.close();\r\n          done();\r\n        }\r\n      }\r\n    };\r\n    client.onopen = () => {\r\n      client.send(JSON.stringify({\r\n        id: 1,\r\n        type: MessageTypes.INIT,\r\n      }));\r\n    };\r\n  });\r\n});\r\n\r\ndescribe('Message Types', function () {\r\n  it('should throw an error if static class is instantiated', (done) => {\r\n    expect(() => {\r\n      new MessageTypes();\r\n    }).to.throw('Static Class');\r\n    done();\r\n  });\r\n});\r\n\r\ndescribe('Client<->Server Flow', () => {\r\n  let server: Server;\r\n\r\n  afterEach(() => {\r\n    if (server) {\r\n      server.close();\r\n    }\r\n  });\r\n\r\n  it('should reconnect after inactivityTimeout closing the connection and then resubscribing', (done) => {\r\n    server = createServer(notFoundRequestListener);\r\n    server.listen(SERVER_EXECUTOR_TESTS_PORT);\r\n\r\n    SubscriptionServer.create({\r\n      schema: subscriptionsSchema,\r\n      execute,\r\n      subscribe,\r\n    }, {\r\n      server,\r\n      path: '/',\r\n    });\r\n\r\n    const client = new SubscriptionClient(`ws://localhost:${SERVER_EXECUTOR_TESTS_PORT}/`, {\r\n      inactivityTimeout: 100,\r\n    });\r\n    let isFirstTime = true;\r\n\r\n    client.onConnected(async () => {\r\n      // Manually close the connection only in the first time, to avoid infinite loop\r\n      if (isFirstTime) {\r\n        isFirstTime = false;\r\n\r\n        setTimeout(() => {\r\n          const sub1 = client.request({\r\n            query: `query { testString }`,\r\n            variables: {},\r\n          }).subscribe({});\r\n          setTimeout(() => {\r\n            sub1.unsubscribe();\r\n            setTimeout(() => {\r\n              const sub2 = client.request({\r\n                query: `query { testString }`,\r\n                variables: {},\r\n              }).subscribe({\r\n                next: (res) => {\r\n                  expect(sub2).not.to.eq(null);\r\n                  expect(res.errors).to.equals(undefined);\r\n                  expect(res.data.testString).to.eq('value');\r\n                  sub2.unsubscribe();\r\n                  done();\r\n                },\r\n              });\r\n            }, 200);\r\n          }, 50);\r\n        }, 50);\r\n      }\r\n    });\r\n  });\r\n\r\n  it('should reconnect after manually closing the connection and then resubscribing', (done) => {\r\n    server = createServer(notFoundRequestListener);\r\n    server.listen(SERVER_EXECUTOR_TESTS_PORT);\r\n\r\n    SubscriptionServer.create({\r\n      schema: subscriptionsSchema,\r\n      execute,\r\n      subscribe,\r\n    }, {\r\n      server,\r\n      path: '/',\r\n    });\r\n\r\n    const client = new SubscriptionClient(`ws://localhost:${SERVER_EXECUTOR_TESTS_PORT}/`);\r\n    let isFirstTime = true;\r\n\r\n    client.onConnected(async () => {\r\n      // Manually close the connection only in the first time, to avoid infinite loop\r\n      if (isFirstTime) {\r\n        isFirstTime = false;\r\n\r\n        setTimeout(() => {\r\n          // Disconnect the client\r\n          client.close(false);\r\n\r\n          // Subscribe to data, without manually reconnect before\r\n          const sub = client.request({\r\n            query: `query { testString }`,\r\n            variables: {},\r\n          }).subscribe({\r\n            next: (res) => {\r\n              expect(sub).not.to.eq(null);\r\n              expect(res.errors).to.equals(undefined);\r\n              expect(res.data.testString).to.eq('value');\r\n\r\n              sub.unsubscribe();\r\n              done();\r\n            },\r\n          });\r\n        }, 300);\r\n      }\r\n    });\r\n  });\r\n\r\n  it('validate requests against schema', (done) => {\r\n    server = createServer(notFoundRequestListener);\r\n    server.listen(SERVER_EXECUTOR_TESTS_PORT);\r\n\r\n    SubscriptionServer.create({\r\n      schema: subscriptionsSchema,\r\n      execute,\r\n      subscribe,\r\n      validationRules: specifiedRules,\r\n    }, {\r\n      server,\r\n      path: '/',\r\n    });\r\n\r\n    const client = new SubscriptionClient(`ws://localhost:${SERVER_EXECUTOR_TESTS_PORT}/`);\r\n    let isFirstTime = true;\r\n\r\n    client.onConnected(async () => {\r\n      // Manually close the connection only in the first time, to avoid infinite loop\r\n      if (isFirstTime) {\r\n        isFirstTime = false;\r\n\r\n        setTimeout(() => {\r\n          // Disconnect the client\r\n          client.close(false);\r\n\r\n          // Subscribe to data, without manually reconnect before\r\n          const sub = client.request({\r\n            query: `query { invalid }`,\r\n            variables: {},\r\n          }).subscribe({\r\n            next: (res) => {\r\n              expect(sub).not.to.eq(null);\r\n\r\n              expect(res.data).to.eq(undefined);\r\n              expect(res.errors[0].message).to.eq(\r\n                'Cannot query field \"invalid\" on type \"Query\".',\r\n              );\r\n\r\n              sub.unsubscribe();\r\n              done();\r\n            },\r\n          });\r\n        }, 300);\r\n      }\r\n    });\r\n  });\r\n\r\n  it('should close iteration over AsyncIterator when client unsubscribes', async () => {\r\n    subscriptionAsyncIteratorSpy.resetHistory();\r\n    resolveAsyncIteratorSpy.resetHistory();\r\n\r\n    server = createServer(notFoundRequestListener);\r\n    server.listen(SERVER_EXECUTOR_TESTS_PORT);\r\n\r\n    SubscriptionServer.create({\r\n      schema: subscriptionsSchema,\r\n      execute,\r\n      subscribe,\r\n    }, {\r\n      server,\r\n      path: '/',\r\n    });\r\n\r\n    const createClientAndSubscribe = (): Promise<any> => {\r\n      const client = new SubscriptionClient(`ws://localhost:${SERVER_EXECUTOR_TESTS_PORT}/`);\r\n      let sub: any = null;\r\n      const cbSpy = sinon.spy();\r\n\r\n      client.onConnected(() => {\r\n        sub = client.request({\r\n          query: `subscription { somethingChanged }`,\r\n          variables: {},\r\n        }).subscribe({\r\n          next: (res) => {\r\n            cbSpy(null, res);\r\n          },\r\n          error: (err) => {\r\n            cbSpy(err, null);\r\n          },\r\n          complete: () => {\r\n            cbSpy(null, null);\r\n          },\r\n        });\r\n      });\r\n\r\n      return new Promise(resolve => {\r\n        setTimeout(() => {\r\n          resolve({\r\n            unsubscribe: () => sub && sub.unsubscribe(),\r\n            spy: cbSpy,\r\n          });\r\n        }, 300);\r\n      });\r\n    };\r\n\r\n    const client1 = await createClientAndSubscribe();\r\n    const client2 = await createClientAndSubscribe();\r\n\r\n    // Publish data - both client should get this message\r\n    subscriptionsPubSub.publish(TEST_PUBLICATION, { somethingChanged: 'test-payload' });\r\n    await wait(400);\r\n    // Each client listener should call once\r\n    expect(client1.spy.callCount).to.eq(1);\r\n    expect(client2.spy.callCount).to.eq(1);\r\n    // But the async iterator subscription should call twice, one for each subscription\r\n    expect(subscriptionAsyncIteratorSpy.callCount).to.eq(2);\r\n    expect(resolveAsyncIteratorSpy.callCount).to.eq(2);\r\n    // Clear spies before publishing again\r\n    subscriptionAsyncIteratorSpy.resetHistory();\r\n    resolveAsyncIteratorSpy.resetHistory();\r\n    client1.spy.resetHistory();\r\n    client2.spy.resetHistory();\r\n\r\n    // Unsubscribe client 1\r\n    client1.unsubscribe();\r\n    await wait(300);\r\n\r\n    // Now only client 2 should get the published payload\r\n    subscriptionsPubSub.publish(TEST_PUBLICATION, { somethingChanged: 'test-payload-2' });\r\n    await wait(400);\r\n\r\n    expect(client1.spy.callCount).to.eq(0);\r\n    expect(client2.spy.callCount).to.eq(1);\r\n    // should be 1 because there is only one subscriber now (client2)\r\n    expect(resolveAsyncIteratorSpy.callCount).to.eq(1);\r\n    // should be 0 because subscribe called only in the beginning\r\n    expect(subscriptionAsyncIteratorSpy.callCount).to.eq(0);\r\n    client2.unsubscribe();\r\n  });\r\n\r\n  it('should close iteration over AsyncIterator when client disconnects', async () => {\r\n    resolveAsyncIteratorSpy.resetHistory();\r\n\r\n    server = createServer(notFoundRequestListener);\r\n    server.listen(SERVER_EXECUTOR_TESTS_PORT);\r\n\r\n    SubscriptionServer.create({\r\n      schema: subscriptionsSchema,\r\n      execute,\r\n      subscribe,\r\n    }, {\r\n      server,\r\n      path: '/',\r\n    });\r\n\r\n    const createClientAndSubscribe = (): Promise<any> => {\r\n      const client = new SubscriptionClient(`ws://localhost:${SERVER_EXECUTOR_TESTS_PORT}/`);\r\n      const cbSpy = sinon.spy();\r\n\r\n      client.onConnected(() => {\r\n        client.request({\r\n          query: `subscription { somethingChanged }`,\r\n          variables: {},\r\n        }).subscribe({\r\n          next: (res) => {\r\n            cbSpy(null, res);\r\n          },\r\n          error: (err) => {\r\n            cbSpy(err, null);\r\n          },\r\n          complete: () => {\r\n            cbSpy(null, null);\r\n          },\r\n        });\r\n      });\r\n\r\n      return new Promise(resolve => {\r\n        setTimeout(() => {\r\n          resolve({\r\n            close: () => client.close(),\r\n            spy: cbSpy,\r\n          });\r\n        }, 300);\r\n      });\r\n    };\r\n\r\n    const client1 = await createClientAndSubscribe();\r\n    const client2 = await createClientAndSubscribe();\r\n\r\n    // Publish data - both client should get this message\r\n    subscriptionsPubSub.publish(TEST_PUBLICATION, { somethingChanged: 'test-payload' });\r\n    await wait(400);\r\n    // Each client listener should call once\r\n    expect(client1.spy.callCount).to.eq(1);\r\n    expect(client2.spy.callCount).to.eq(1);\r\n    // But the async iterator subscription should call twice, one for each subscription\r\n    expect(resolveAsyncIteratorSpy.callCount).to.eq(2);\r\n    // Clear spies before publishing again\r\n    resolveAsyncIteratorSpy.resetHistory();\r\n    client1.spy.resetHistory();\r\n    client2.spy.resetHistory();\r\n\r\n    // Close client 1\r\n    client1.close();\r\n    await wait(300);\r\n\r\n    // Now only client 2 should get the published payload\r\n    subscriptionsPubSub.publish(TEST_PUBLICATION, { somethingChanged: 'test-payload-2' });\r\n    await wait(400);\r\n\r\n    expect(client1.spy.callCount).to.eq(0);\r\n    expect(client2.spy.callCount).to.eq(1);\r\n    // should be 1 because there is only one subscriber now (client2)\r\n    expect(resolveAsyncIteratorSpy.callCount).to.eq(1);\r\n  });\r\n\r\n  it('should handle correctly multiple subscriptions one after each other', (done) => {\r\n    // This tests the use case of a UI component that creates a subscription acoording to it's\r\n    // local data, for example: subscribe to changed on a visible items in a list, and it might\r\n    // change quickly and we want to make sure that the subscriptions flow is correct\r\n\r\n    // Create the server\r\n    server = createServer(notFoundRequestListener);\r\n    server.listen(SERVER_EXECUTOR_TESTS_PORT);\r\n\r\n    SubscriptionServer.create({\r\n      schema,\r\n      execute,\r\n    }, {\r\n      server,\r\n      path: '/',\r\n    });\r\n\r\n    const firstSubscriptionSpy = sinon.spy();\r\n\r\n    // Create the client\r\n    const client = new SubscriptionClient(`ws://localhost:${SERVER_EXECUTOR_TESTS_PORT}/`);\r\n    client.onConnected(() => {\r\n      // Subscribe to a regular query\r\n      client.request({\r\n        query: `query { testString }`,\r\n        variables: {},\r\n      }).subscribe({\r\n        next: (res) => {\r\n          assert(res.errors === undefined, 'unexpected error from query');\r\n          expect(res.data).to.deep.equal({ testString: 'value' });\r\n\r\n          // Now, subscribe to graphql subscription\r\n          const firstSub = client.request({\r\n            query: `subscription {\r\n              user(id: \"3\") {\r\n                id\r\n                name\r\n              }\r\n            }`,\r\n          }).subscribe({\r\n            next: (sRes) => {\r\n              assert(sRes.errors === undefined, 'unexpected error from 1st subscription');\r\n              assert(sRes.data, 'unexpected null from 1st subscription result');\r\n              expect(Object.keys(client['operations']).length).to.eq(1);\r\n              expect(sRes.data.user.id).to.eq('3');\r\n              firstSubscriptionSpy();\r\n\r\n              firstSub.unsubscribe();\r\n\r\n              setTimeout(() => {\r\n                client.request({\r\n                  query: `subscription {\r\n                    user(id: \"1\") {\r\n                      id\r\n                      name\r\n                    }\r\n                  }`,\r\n                }).subscribe({\r\n                  next: (s2Res) => {\r\n                    assert(s2Res.errors === undefined, 'unexpected error from 2nd subscription');\r\n                    assert(s2Res.data !== null, 'unexpected null from 2nd subscription result');\r\n                    expect(s2Res.data.user.id).to.eq('1');\r\n                    expect(Object.keys(client['operations']).length).to.eq(1);\r\n                    expect(firstSubscriptionSpy.callCount).to.eq(1);\r\n\r\n                    done();\r\n                  },\r\n                });\r\n              }, 10);\r\n            },\r\n          });\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  it('works with custom WebSocket implementation', (done) => {\r\n    const MockServer = require('mock-socket-with-protocol').Server;\r\n    const MockWebSocket = require('mock-socket-with-protocol').WebSocket;\r\n\r\n    const CUSTOM_PORT = 234235;\r\n    const customServer = new MockServer(`ws://localhost:${CUSTOM_PORT}`);\r\n    SubscriptionServer.create(\r\n      {\r\n        schema,\r\n        execute,\r\n        subscribe,\r\n      },\r\n      customServer,\r\n    );\r\n\r\n    const client = new SubscriptionClient(`ws://localhost:${CUSTOM_PORT}`, {},\r\n      MockWebSocket,\r\n    );\r\n\r\n    let numTriggers = 0;\r\n        client.request({\r\n            query: `\r\n            subscription userInfoFilter1($id: String) {\r\n              userFiltered(id: $id) {\r\n                id\r\n                name\r\n              }\r\n            }`,\r\n            operationName: 'userInfoFilter1',\r\n            variables: {\r\n                id: '3',\r\n            },\r\n        }).subscribe({\r\n            next: (result: any) => {\r\n                if (result.errors) {\r\n                    assert(false);\r\n                }\r\n\r\n                if (result.data) {\r\n                    numTriggers += 1;\r\n                    assert.property(result.data, 'userFiltered');\r\n                    assert.equal(result.data.userFiltered.id, '3');\r\n                    assert.equal(result.data.userFiltered.name, 'Jessie');\r\n                }\r\n            },\r\n        });\r\n\r\n    setTimeout(() => {\r\n      testPubsub.publish('userFiltered', {id: 1});\r\n      testPubsub.publish('userFiltered', {id: 2});\r\n      testPubsub.publish('userFiltered', {id: 3});\r\n    }, 50);\r\n\r\n    setTimeout(() => {\r\n      expect(numTriggers).equal(1);\r\n      done();\r\n    }, 200);\r\n  });\r\n});\r\n"]}