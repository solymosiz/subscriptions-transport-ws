{"version":3,"file":"client.js","sourceRoot":"","sources":["../src/client.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAM,OAAO,GACX,OAAO,MAAM,KAAK,WAAW;IAC3B,CAAC,CAAC,MAAM;IACR,CAAC,CAAC,OAAO,MAAM,KAAK,WAAW;QAC/B,CAAC,CAAC,MAAM;QACR,CAAC,CAAC,EAAE,CAAC;AACT,IAAM,eAAe,GAAG,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,YAAY,CAAC;AAElE,gCAAkC;AAClC,+CAIuB;AACvB,+CAAyC;AACzC,+CAAyC;AAEzC,oDAAiD;AAEjD,qEAAoE;AACpE,uDAA6C;AAE7C,uCAAwC;AACxC,uCAAwD;AACxD,iDAA2C;AA4D3C;IAiCE,4BACE,GAAW,EACX,OAAuB,EACvB,aAAmB,EACnB,kBAAsC,EACtC,YAAkB,EAClB,YAAkB;QAElB,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACtB,IAAA,KAWF,OAAO,IAAI,EAAE,EAVf,0BAA8B,EAA9B,kBAAkB,mBAAG,SAAS,KAAA,EAC9B,wBAAqB,EAArB,gBAAgB,mBAAG,EAAE,KAAA,EACrB,kBAA2B,EAA3B,UAAU,mBAAG,yBAAc,KAAA,EAC3B,eAAoB,EAApB,OAAO,mBAAG,qBAAU,KAAA,EACpB,iBAAiB,EAAjB,SAAS,mBAAG,KAAK,KAAA,EACjB,4BAA+B,EAA/B,oBAAoB,mBAAG,QAAQ,KAAA,EAC/B,YAAY,EAAZ,IAAI,mBAAG,KAAK,KAAA,EACZ,yBAAqB,EAArB,iBAAiB,mBAAG,CAAC,KAAA,EACrB,yBAAsB,EAAtB,iBAAiB,mBAAG,EAAE,KAAA,EACtB,4BAA4B,EAA5B,oBAAoB,mBAAG,KAAK,KACb,CAAC;QAElB,IAAI,CAAC,MAAM,GAAG,aAAa,IAAI,eAAe,CAAC;QAC/C,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,MAAM,IAAI,KAAK,CACb,oFAAoF,CACrF,CAAC;SACH;QAED,IAAI,CAAC,WAAW,GAAG,kBAAkB,IAAI,qBAAU,CAAC;QACpD,IAAI,CAAC,YAAY,GAAG,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC;QAC/C,IAAI,CAAC,YAAY,GAAG,YAAY,IAAI,IAAI,CAAC,SAAS,CAAC;QACnD,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,YAAY,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,IAAK,OAAA,OAAO,EAAE,EAAT,CAAS,CAAC,CAAC;QACxD,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC;QAC/B,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC;QACzB,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACjD,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;QACnB,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;QAC5C,IAAI,CAAC,YAAY,GAAG,IAAI,4BAAY,EAAE,CAAC;QACvC,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,6BAA6B,EAAE,CAAC;QACpE,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;QACnE,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QAEjD,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;IACH,CAAC;IAED,sBAAW,sCAAM;aAAjB;YACE,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;gBACxB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;aAC3B;YAED,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;QAChC,CAAC;;;OAAA;IAEM,kCAAK,GAAZ,UAAa,QAAe,EAAE,YAAmB,EAAE,SAAwB;QAA9D,yBAAA,EAAA,eAAe;QAAE,6BAAA,EAAA,mBAAmB;QAAE,0BAAA,EAAA,gBAAwB;QACzE,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;YACxB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;YAEjC,IAAI,QAAQ,EAAE;gBACZ,IAAI,CAAC,4BAA4B,EAAE,CAAC;gBACpC,IAAI,CAAC,sBAAsB,EAAE,CAAC;gBAC9B,IAAI,CAAC,wBAAwB,EAAE,CAAC;gBAChC,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,IAAI,CAAC,WAAW,CACd,SAAS,EACT,uBAAY,CAAC,wBAAwB,EACrC,IAAI,CACL,CAAC;aACH;YAED,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACpB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;YAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;YAElD,IAAI,CAAC,QAAQ,EAAE;gBACb,IAAI,CAAC,YAAY,EAAE,CAAC;aACrB;SACF;IACH,CAAC;IAEM,oCAAO,GAAd,UAAe,OAAyB;;QACtC,IAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChD,IAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1D,IAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEhD,IAAI,IAAY,CAAC;QAEjB,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAE9B;YACE,GAAC,2BAAY,IAAb;gBACE,OAAO,IAAI,CAAC;YACd,CAAC;YACD,YAAS,GAAT,UACE,cAEkC,EAClC,OAAgC,EAChC,UAAuB;gBAEvB,IAAM,QAAQ,GAAG,WAAW,CAAC,cAAc,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;gBAElE,IAAI,GAAG,gBAAgB,CAAC,OAAO,EAAE,UAAC,KAAc,EAAE,MAAW;oBAC3D,IAAI,KAAK,KAAK,IAAI,IAAI,MAAM,KAAK,IAAI,EAAE;wBACrC,IAAI,QAAQ,CAAC,QAAQ,EAAE;4BACrB,QAAQ,CAAC,QAAQ,EAAE,CAAC;yBACrB;qBACF;yBAAM,IAAI,KAAK,EAAE;wBAChB,IAAI,QAAQ,CAAC,KAAK,EAAE;4BAClB,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;yBAC1B;qBACF;yBAAM;wBACL,IAAI,QAAQ,CAAC,IAAI,EAAE;4BACjB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;yBACvB;qBACF;gBACH,CAAC,CAAC,CAAC;gBAEH,OAAO;oBACL,WAAW,EAAE;wBACX,IAAI,IAAI,EAAE;4BACR,WAAW,CAAC,IAAI,CAAC,CAAC;4BAClB,IAAI,GAAG,IAAI,CAAC;yBACb;oBACH,CAAC;iBACF,CAAC;YACJ,CAAC;eACD;IACJ,CAAC;IAEM,+BAAE,GAAT,UAAU,SAAiB,EAAE,QAAoB,EAAE,OAAa;QAC9D,IAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAEnE,OAAO;YACL,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC5C,CAAC,CAAC;IACJ,CAAC;IAEM,wCAAW,GAAlB,UAAmB,QAAoB,EAAE,OAAa;QACpD,OAAO,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;IAEM,yCAAY,GAAnB,UAAoB,QAAoB,EAAE,OAAa;QACrD,OAAO,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAEM,2CAAc,GAArB,UAAsB,QAAoB,EAAE,OAAa;QACvD,OAAO,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IACpD,CAAC;IAEM,0CAAa,GAApB,UAAqB,QAAoB,EAAE,OAAa;QACtD,OAAO,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;IAEM,2CAAc,GAArB,UAAsB,QAAoB,EAAE,OAAa;QACvD,OAAO,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IACpD,CAAC;IAEM,oCAAO,GAAd,UAAe,QAAoB,EAAE,OAAa;QAChD,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC7C,CAAC;IAEM,2CAAc,GAArB;QAAA,iBAIC;QAHC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAC,KAAK;YACzC,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,6CAAgB,GAAvB,UACE,OAAyB;QAD3B,iBAwBC;QArBC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAM,KAAK,GAAG,UAAC,KAAmB,EAAE,KAAU;gBAC5C,IAAM,IAAI,GAAG,UAAC,KAAW;oBACvB,IAAI,KAAK,EAAE;wBACT,MAAM,CAAC,KAAK,CAAC,CAAC;qBACf;yBAAM;wBACL,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;4BACpB,IAAM,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;4BACxB,IAAI,CAAC,EAAE;gCACL,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;6BACjD;yBACF;6BAAM;4BACL,OAAO,CAAC,OAAO,CAAC,CAAC;yBAClB;qBACF;gBACH,CAAC,CAAC;gBACF,IAAI,EAAE,CAAC;YACT,CAAC,CAAC;YAEF,KAAK,gBAAK,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,gCAAG,GAAV,UAAW,WAAyB;QAApC,iBAYC;QAXC,WAAW,CAAC,GAAG,CAAC,UAAC,UAAU;YACzB,IAAI,OAAO,UAAU,CAAC,eAAe,KAAK,UAAU,EAAE;gBACpD,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aACnC;iBAAM;gBACL,MAAM,IAAI,KAAK,CACb,yDAAyD,CAC1D,CAAC;aACH;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,gDAAmB,GAA1B,UAA2B,YAAiB;QAC1C,IAAI,aAAkB,CAAC;QACvB,IAAI,IAAY,CAAC;QAEjB,IAAI;YACF,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YAChD,IAAI,GAAG,aAAa,CAAC,EAAE,CAAC;SACzB;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,qCAAmC,YAAY,SAAI,CAAG,CAAC,CAAC;SACzE;QAED,IACE;YACE,uBAAY,CAAC,QAAQ;YACrB,uBAAY,CAAC,YAAY;YACzB,uBAAY,CAAC,SAAS;SACvB,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EACtB;YACA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEvB,OAAO;SACR;QAED,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAE7B,IAAI,CAAC,eAAe,EAAE,CAAC;SACxB;QAED,QAAQ,aAAa,CAAC,IAAI,EAAE;YAC1B,KAAK,uBAAY,CAAC,oBAAoB;gBACpC,IAAI,IAAI,CAAC,kBAAkB,EAAE;oBAC3B,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;iBAChD;gBACD,MAAM;YAER,KAAK,uBAAY,CAAC,kBAAkB;gBAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CACpB,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,WAAW,EAC/C,aAAa,CAAC,OAAO,CACtB,CAAC;gBACF,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC1B,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;gBACrB,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,CAAC;gBAErC,IAAI,IAAI,CAAC,kBAAkB,EAAE;oBAC3B,IAAI,CAAC,kBAAkB,EAAE,CAAC;iBAC3B;gBACD,MAAM;YAER,KAAK,uBAAY,CAAC,YAAY;gBAC5B,IAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC;gBAC9C,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBAC7B,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC/B,MAAM;YAER,KAAK,uBAAY,CAAC,SAAS;gBACzB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,OAAO,CAC3B,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC,EACxC,IAAI,CACL,CAAC;gBACF,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBAC7B,MAAM;YAER,KAAK,uBAAY,CAAC,QAAQ;gBACxB,IAAM,aAAa,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM;oBACjD,CAAC,CAAC,aAAa,CAAC,OAAO;oBACvB,CAAC,uBACM,aAAa,CAAC,OAAO,KACxB,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,GACxD,CAAC;gBACN,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;gBACnD,MAAM;YAER,KAAK,uBAAY,CAAC,yBAAyB;gBACzC,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;oBAC9B,IAAI,CAAC,eAAe,EAAE,CAAC;iBACxB;gBACD,MAAM;YAER;gBACE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC5C;IACH,CAAC;IAEO,4CAAe,GAAvB;QACE,IAAM,OAAO,GAAG,OAAO,IAAI,CAAC,oBAAoB,KAAK,WAAW,CAAC;QACjE,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;QAEjC,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,eAAe,EAAE,CAAC;SACxB;QAED,IAAI,IAAI,CAAC,yBAAyB,EAAE;YAClC,aAAa,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;YAC9C,IAAI,CAAC,eAAe,EAAE,CAAC;SACxB;QACD,IAAI,CAAC,yBAAyB,GAAG,WAAW,CAC1C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAC/B,IAAI,CAAC,SAAS,CACf,CAAC;QACF,OAAO,OAAO,CAAC;IACjB,CAAC;IAEO,gDAAmB,GAA3B,UACE,gBAAyC;QAEzC,OAAO;YACL,OAAA,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBAC1B,IAAI,OAAO,gBAAgB,KAAK,UAAU,EAAE;oBAC1C,IAAI;wBACF,OAAO,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;qBAC7C;oBAAC,OAAO,KAAK,EAAE;wBACd,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;qBACtB;iBACF;gBAED,OAAO,CAAC,gBAAgB,CAAC,CAAC;YAC5B,CAAC,CAAC;QAVF,CAUE,CAAC;IACP,CAAC;IAEO,6CAAgB,GAAxB,UACE,OAAyB,EACzB,OAA+C;QAFjD,iBAyBC;QArBC,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;YACxB,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;QAED,IAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACxC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,SAAA,EAAE,CAAC;QAEtD,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;aAC3B,IAAI,CAAC,UAAC,gBAAgB;YACrB,KAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;YACtD,IAAI,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACzB,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,gBAAgB,EAAE,OAAO,SAAA,EAAE,CAAC;gBAC/D,KAAI,CAAC,WAAW,CAAC,IAAI,EAAE,uBAAY,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;aAClE;QACH,CAAC,CAAC;aACD,KAAK,CAAC,UAAC,KAAK;YACX,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,OAAO,CAAC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEL,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,wCAAW,GAAnB,UACE,cAA8C,EAC9C,KAA0B,EAC1B,QAAqB;QAErB,IAAI,OAAO,cAAc,KAAK,UAAU,EAAE;YACxC,OAAO;gBACL,IAAI,EAAE,UAAC,CAAI,IAAK,OAAA,cAAc,CAAC,CAAC,CAAC,EAAjB,CAAiB;gBACjC,KAAK,EAAE,UAAC,CAAQ,IAAK,OAAA,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,EAAjB,CAAiB;gBACtC,QAAQ,EAAE,cAAM,OAAA,QAAQ,IAAI,QAAQ,EAAE,EAAtB,CAAsB;aACvC,CAAC;SACH;QAED,OAAO,cAAc,CAAC;IACxB,CAAC;IAEO,0DAA6B,GAArC;QACE,IAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC;QACnC,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAEhC,OAAO,IAAI,OAAO,CAAC;YACjB,GAAG,EAAE,QAAQ;YACb,GAAG,EAAE,QAAQ;YACb,MAAM,EAAE,GAAG;SACZ,CAAC,CAAC;IACL,CAAC;IAEO,yDAA4B,GAApC;QACE,IAAI,IAAI,CAAC,yBAAyB,EAAE;YAClC,aAAa,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;YAC9C,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;SACvC;IACH,CAAC;IAEO,mDAAsB,GAA9B;QACE,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC5B,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACvC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACjC;IACH,CAAC;IAEO,qDAAwB,GAAhC;QACE,IAAI,IAAI,CAAC,qBAAqB,EAAE;YAC9B,YAAY,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YACzC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;SACnC;IACH,CAAC;IAEO,mDAAsB,GAA9B;QACE,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC5B,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACvC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACjC;IACH,CAAC;IAEO,iDAAoB,GAA5B;QAAA,iBAWC;QAVC,IACE,IAAI,CAAC,iBAAiB,GAAG,CAAC;YAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,CAAC,EACzC;YACA,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC;gBACpC,IAAI,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC7C,KAAI,CAAC,KAAK,EAAE,CAAC;iBACd;YACH,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;SAC5B;IACH,CAAC;IAEO,kDAAqB,GAA7B,UACE,OAAyB,EACzB,OAA+C;QAEvC,IAAA,KAAK,GAA+B,OAAO,MAAtC,EAAE,SAAS,GAAoB,OAAO,UAA3B,EAAE,aAAa,GAAK,OAAO,cAAZ,CAAa;QAEpD,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;QAED,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;SAC7C;QAED,IACE,CAAC,CAAC,mBAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,iCAAe,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;YAC5D,CAAC,aAAa,IAAI,CAAC,mBAAQ,CAAC,aAAa,CAAC,CAAC;YAC3C,CAAC,SAAS,IAAI,CAAC,mBAAQ,CAAC,SAAS,CAAC,CAAC,EACnC;YACA,MAAM,IAAI,KAAK,CACb,+DAA+D;gBAC7D,sEAAsE,CACzE,CAAC;SACH;IACH,CAAC;IAEO,yCAAY,GAApB,UAAqB,EAAU,EAAE,IAAY,EAAE,OAAY;QACzD,IAAM,eAAe,GACnB,OAAO,IAAI,OAAO,CAAC,KAAK;YACtB,CAAC,uBACM,OAAO,KACV,KAAK,EACH,OAAO,OAAO,CAAC,KAAK,KAAK,QAAQ;oBAC/B,CAAC,CAAC,OAAO,CAAC,KAAK;oBACf,CAAC,CAAC,eAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAE9B,CAAC,CAAC,OAAO,CAAC;QAEd,OAAO;YACL,EAAE,IAAA;YACF,IAAI,MAAA;YACJ,OAAO,EAAE,eAAe;SACzB,CAAC;IACJ,CAAC;IAGO,yCAAY,GAApB,UAAqB,MAAW;QAC9B,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACzB,OAAO,MAAM,CAAC;SACf;QAID,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE;YAC3B,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SACzC;QAED,IAAI,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE;YAC5B,OAAO,CAAC,MAAM,CAAC,CAAC;SACjB;QAED,OAAO;YACL;gBACE,IAAI,EAAE,eAAe;gBACrB,OAAO,EAAE,eAAe;gBACxB,aAAa,EAAE,MAAM;aACtB;SACF,CAAC;IACJ,CAAC;IAEO,wCAAW,GAAnB,UAAoB,EAAU,EAAE,IAAY,EAAE,OAAY;QACxD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IAC5D,CAAC;IAGO,2CAAc,GAAtB,UAAuB,OAAe;QACpC,QAAQ,IAAI,CAAC,MAAM,EAAE;YACnB,KAAK,IAAI,CAAC,MAAM,CAAC,IAAI;gBACnB,IAAI,iBAAiB,GAAwB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;gBACxE,IAAI;oBACF,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;iBACtC;gBAAC,OAAO,CAAC,EAAE;oBACV,IAAI,CAAC,YAAY,CAAC,IAAI,CACpB,OAAO,EACP,IAAI,KAAK,CAAC,wCAAsC,OAAS,CAAC,CAC3D,CAAC;iBACH;gBAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBACpC,MAAM;YACR,KAAK,IAAI,CAAC,MAAM,CAAC,UAAU;gBACzB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAEvC,MAAM;YACR;gBACE,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;oBACtB,IAAI,CAAC,YAAY,CAAC,IAAI,CACpB,OAAO,EACP,IAAI,KAAK,CACP,wEAAwE;wBACtE,kCAAkC;wBAClC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAC1B,CACF,CAAC;iBACH;SACJ;IACH,CAAC;IAEO,gDAAmB,GAA3B;QACE,OAAO,MAAM,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IACxC,CAAC;IAEO,yCAAY,GAApB;QAAA,iBAwBC;QAvBC,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,oBAAoB,EAAE;YACzE,OAAO;SACR;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;gBACvC,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAC3B,KAAI,CAAC,YAAY,CACf,GAAG,EACH,uBAAY,CAAC,SAAS,EACtB,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,OAAO,CAC7B,CACF,CAAC;YACJ,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC1B;QAED,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAEhC,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACtC,IAAI,CAAC,qBAAqB,GAAG,UAAU,CAAC;YACtC,KAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC,EAAE,KAAK,CAAC,CAAC;IACZ,CAAC;IAEO,qDAAwB,GAAhC;QAAA,iBAKC;QAJC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,UAAC,OAAO;YACvC,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;IAChC,CAAC;IAEO,4CAAe,GAAvB;QACE,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC7B,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;YAClC,OAAO;SACR;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SACzB;IACH,CAAC;IAEO,mDAAsB,GAA9B;QAAA,iBAUC;QATC,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAG9B,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC;YACpC,IAAI,KAAI,CAAC,MAAM,KAAK,KAAI,CAAC,MAAM,CAAC,IAAI,EAAE;gBACpC,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBACzB,KAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;aACzB;QACH,CAAC,EAAE,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC9C,CAAC;IAEO,oCAAO,GAAf;;QAAA,iBAqEC;QApEC,IAAI,CAAC,MAAM,QAAO,CAAA,KAAA,IAAI,CAAC,MAAM,CAAA,wCAC3B,IAAI,CAAC,GAAG;YACR,IAAI,CAAC,WAAW,GACb,IAAI,CAAC,iBAAiB,KAC1B,CAAC;QAEF,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAE9B,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG;;;;;6BACf,CAAA,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,IAAI,CAAA,EAAhC,cAAgC;wBAClC,IAAI,CAAC,sBAAsB,EAAE,CAAC;wBAC9B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;wBAC1B,IAAI,CAAC,YAAY,CAAC,IAAI,CACpB,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,YAAY,CAClD,CAAC;;;;wBAIE,WAAM,IAAI,CAAC,gBAAgB,EAAE,EAAA;;wBADzB,gBAAgB,GACpB,SAA6B;wBAG/B,IAAI,CAAC,WAAW,CACd,SAAS,EACT,uBAAY,CAAC,mBAAmB,EAChC,gBAAgB,CACjB,CAAC;wBACF,IAAI,CAAC,wBAAwB,EAAE,CAAC;;;;wBAEhC,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,uBAAY,CAAC,oBAAoB,EAAE,OAAK,CAAC,CAAC;wBACtE,IAAI,CAAC,wBAAwB,EAAE,CAAC;;;;;aAGrC,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,UAAC,KAAU;YAC/B,IAAI,CAAC,KAAI,CAAC,YAAY,EAAE;gBACtB,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;gBAC/C,KAAI,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;aAChC;QACH,CAAC,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,UAAC,GAAU;YAG/B,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QACvC,CAAC,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,UAAC,EAAuB;gBAArB,IAAI,UAAA;YAM7B,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;gBAE5B,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY;qBAClC,KAAK,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC;qBACjB,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAA9B,CAA8B,CAAC,CAAC;aAC/C;iBAAM;gBAEL,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY;qBAClC,KAAK,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC;qBACjB,IAAI,CAAC,cAAM,OAAA,IAAI,CAAC,WAAW,EAAE,EAAlB,CAAkB,CAAC;qBAC9B,IAAI,CAAC,UAAC,MAAmB;oBACxB,OAAA,KAAI,CAAC,mBAAmB,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;gBAAhD,CAAgD,CACjD,CAAC;aACL;QACH,CAAC,CAAC;IACJ,CAAC;IAEO,wCAAW,GAAnB,UAAoB,IAAY;QAC9B,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YACzB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAC7B,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC5B,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,uBAAY,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;SAC1D;IACH,CAAC;IACH,yBAAC;AAAD,CAAC,AAltBD,IAktBC;AAltBY,gDAAkB","sourcesContent":["declare let window: any;\r\nconst _global =\r\n  typeof global !== \"undefined\"\r\n    ? global\r\n    : typeof window !== \"undefined\"\r\n    ? window\r\n    : {};\r\nconst NativeWebSocket = _global.WebSocket || _global.MozWebSocket;\r\n\r\nimport * as Backoff from \"backo2\";\r\nimport {\r\n  default as EventEmitterType,\r\n  EventEmitter,\r\n  ListenerFn,\r\n} from \"eventemitter3\";\r\nimport isString from \"./utils/is-string\";\r\nimport isObject from \"./utils/is-object\";\r\nimport { ExecutionResult } from \"graphql/execution/execute\";\r\nimport { print } from \"graphql/language/printer\";\r\nimport { DocumentNode } from \"graphql/language/ast\";\r\nimport { getOperationAST } from \"graphql/utilities/getOperationAST\";\r\nimport $$observable from \"symbol-observable\";\r\n\r\nimport { GRAPHQL_WS } from \"./protocol\";\r\nimport { MIN_WS_TIMEOUT, WS_TIMEOUT } from \"./defaults\";\r\nimport MessageTypes from \"./message-types\";\r\n\r\nexport interface Observer<T> {\r\n  next?: (value: T) => void;\r\n  error?: (error: Error) => void;\r\n  complete?: () => void;\r\n}\r\n\r\nexport interface Observable<T> {\r\n  subscribe(observer: Observer<T>): {\r\n    unsubscribe: () => void;\r\n  };\r\n}\r\n\r\nexport interface OperationOptions {\r\n  query?: string | DocumentNode;\r\n  variables?: Object;\r\n  operationName?: string;\r\n  [key: string]: any;\r\n}\r\n\r\nexport type FormatedError = Error & {\r\n  originalError?: any;\r\n};\r\n\r\nexport interface Operation {\r\n  options: OperationOptions;\r\n  handler: (error: Error[], result?: any) => void;\r\n}\r\n\r\nexport interface Operations {\r\n  [id: string]: Operation;\r\n}\r\n\r\nexport interface Middleware {\r\n  applyMiddleware(options: OperationOptions, next: Function): void;\r\n}\r\n\r\nexport type ConnectionParams = {\r\n  [paramName: string]: any;\r\n};\r\n\r\nexport type ConnectionParamsOptions =\r\n  | ConnectionParams\r\n  | Function\r\n  | Promise<ConnectionParams>;\r\n\r\nexport interface ClientOptions {\r\n  connectionParams?: ConnectionParamsOptions;\r\n  minTimeout?: number;\r\n  timeout?: number;\r\n  reconnect?: boolean;\r\n  reconnectionAttempts?: number;\r\n  connectionCallback?: (error: Error[], result?: any) => void;\r\n  lazy?: boolean;\r\n  inactivityTimeout?: number;\r\n  wsOptionArguments?: any[];\r\n  serverSendsKeepalive?: boolean;\r\n}\r\n\r\nexport class SubscriptionClient {\r\n  public client: any;\r\n  public operations: Operations;\r\n  private url: string;\r\n  private dataReceiver: Promise<void>;\r\n  private dataLoadImpl: Function;\r\n  private dataDumpImpl: Function;\r\n  private nextOperationId: number;\r\n  private connectionParams: Function;\r\n  private minWsTimeout: number;\r\n  private wsTimeout: number;\r\n  private unsentMessagesQueue: Array<any>; // queued messages while websocket is opening.\r\n  private reconnect: boolean;\r\n  private reconnecting: boolean;\r\n  private reconnectionAttempts: number;\r\n  private backoff: any;\r\n  private connectionCallback: any;\r\n  private eventEmitter: EventEmitterType;\r\n  private lazy: boolean;\r\n  private inactivityTimeout: number;\r\n  private inactivityTimeoutId: any;\r\n  private closedByUser: boolean;\r\n  private wsImpl: any;\r\n  private wsProtocols: string | string[];\r\n  private wasKeepAliveReceived: boolean;\r\n  private serverSendsKeepalive: boolean;\r\n  private tryReconnectTimeoutId: any;\r\n  private checkConnectionIntervalId: any;\r\n  private maxConnectTimeoutId: any;\r\n  private middlewares: Middleware[];\r\n  private maxConnectTimeGenerator: any;\r\n  private wsOptionArguments: any[];\r\n\r\n  constructor(\r\n    url: string,\r\n    options?: ClientOptions,\r\n    webSocketImpl?: any,\r\n    webSocketProtocols?: string | string[],\r\n    dataLoadImpl?: any,\r\n    dataDumpImpl?: any\r\n  ) {\r\n    console.log(\"ts asdasdasd\");\r\n    const {\r\n      connectionCallback = undefined,\r\n      connectionParams = {},\r\n      minTimeout = MIN_WS_TIMEOUT,\r\n      timeout = WS_TIMEOUT,\r\n      reconnect = false,\r\n      reconnectionAttempts = Infinity,\r\n      lazy = false,\r\n      inactivityTimeout = 0,\r\n      wsOptionArguments = [],\r\n      serverSendsKeepalive = false,\r\n    } = options || {};\r\n\r\n    this.wsImpl = webSocketImpl || NativeWebSocket;\r\n    if (!this.wsImpl) {\r\n      throw new Error(\r\n        \"Unable to find native implementation, or alternative implementation for WebSocket!\"\r\n      );\r\n    }\r\n\r\n    this.wsProtocols = webSocketProtocols || GRAPHQL_WS;\r\n    this.dataLoadImpl = dataLoadImpl || JSON.parse;\r\n    this.dataDumpImpl = dataDumpImpl || JSON.stringify;\r\n    this.connectionCallback = connectionCallback;\r\n    this.url = url;\r\n    this.dataReceiver = new Promise((resolve) => resolve());\r\n    this.operations = {};\r\n    this.nextOperationId = 0;\r\n    this.minWsTimeout = minTimeout;\r\n    this.wsTimeout = timeout;\r\n    this.unsentMessagesQueue = [];\r\n    this.reconnect = reconnect;\r\n    this.reconnecting = false;\r\n    this.reconnectionAttempts = reconnectionAttempts;\r\n    this.lazy = !!lazy;\r\n    this.inactivityTimeout = inactivityTimeout;\r\n    this.closedByUser = false;\r\n    this.backoff = new Backoff({ jitter: 0.5 });\r\n    this.eventEmitter = new EventEmitter();\r\n    this.middlewares = [];\r\n    this.client = null;\r\n    this.maxConnectTimeGenerator = this.createMaxConnectTimeGenerator();\r\n    this.connectionParams = this.getConnectionParams(connectionParams);\r\n    this.wsOptionArguments = wsOptionArguments;\r\n    this.serverSendsKeepalive = serverSendsKeepalive;\r\n\r\n    if (!this.lazy) {\r\n      this.connect();\r\n    }\r\n  }\r\n\r\n  public get status() {\r\n    if (this.client === null) {\r\n      return this.wsImpl.CLOSED;\r\n    }\r\n\r\n    return this.client.readyState;\r\n  }\r\n\r\n  public close(isForced = true, closedByUser = true, closeCode: number = null) {\r\n    this.clearInactivityTimeout();\r\n    if (this.client !== null) {\r\n      this.closedByUser = closedByUser;\r\n\r\n      if (isForced) {\r\n        this.clearCheckConnectionInterval();\r\n        this.clearMaxConnectTimeout();\r\n        this.clearTryReconnectTimeout();\r\n        this.unsubscribeAll();\r\n        this.sendMessage(\r\n          undefined,\r\n          MessageTypes.GQL_CONNECTION_TERMINATE,\r\n          null\r\n        );\r\n      }\r\n\r\n      this.client.close();\r\n      this.client.onopen = null;\r\n      this.client.onclose = null;\r\n      this.client.onerror = null;\r\n      this.client.onmessage = null;\r\n      this.client = null;\r\n      this.eventEmitter.emit(\"disconnected\", closeCode);\r\n\r\n      if (!isForced) {\r\n        this.tryReconnect();\r\n      }\r\n    }\r\n  }\r\n\r\n  public request(request: OperationOptions): Observable<ExecutionResult> {\r\n    const getObserver = this.getObserver.bind(this);\r\n    const executeOperation = this.executeOperation.bind(this);\r\n    const unsubscribe = this.unsubscribe.bind(this);\r\n\r\n    let opId: string;\r\n\r\n    this.clearInactivityTimeout();\r\n\r\n    return {\r\n      [$$observable]() {\r\n        return this;\r\n      },\r\n      subscribe(\r\n        observerOrNext:\r\n          | Observer<ExecutionResult>\r\n          | ((v: ExecutionResult) => void),\r\n        onError?: (error: Error) => void,\r\n        onComplete?: () => void\r\n      ) {\r\n        const observer = getObserver(observerOrNext, onError, onComplete);\r\n\r\n        opId = executeOperation(request, (error: Error[], result: any) => {\r\n          if (error === null && result === null) {\r\n            if (observer.complete) {\r\n              observer.complete();\r\n            }\r\n          } else if (error) {\r\n            if (observer.error) {\r\n              observer.error(error[0]);\r\n            }\r\n          } else {\r\n            if (observer.next) {\r\n              observer.next(result);\r\n            }\r\n          }\r\n        });\r\n\r\n        return {\r\n          unsubscribe: () => {\r\n            if (opId) {\r\n              unsubscribe(opId);\r\n              opId = null;\r\n            }\r\n          },\r\n        };\r\n      },\r\n    };\r\n  }\r\n\r\n  public on(eventName: string, callback: ListenerFn, context?: any): Function {\r\n    const handler = this.eventEmitter.on(eventName, callback, context);\r\n\r\n    return () => {\r\n      handler.off(eventName, callback, context);\r\n    };\r\n  }\r\n\r\n  public onConnected(callback: ListenerFn, context?: any): Function {\r\n    return this.on(\"connected\", callback, context);\r\n  }\r\n\r\n  public onConnecting(callback: ListenerFn, context?: any): Function {\r\n    return this.on(\"connecting\", callback, context);\r\n  }\r\n\r\n  public onDisconnected(callback: ListenerFn, context?: any): Function {\r\n    return this.on(\"disconnected\", callback, context);\r\n  }\r\n\r\n  public onReconnected(callback: ListenerFn, context?: any): Function {\r\n    return this.on(\"reconnected\", callback, context);\r\n  }\r\n\r\n  public onReconnecting(callback: ListenerFn, context?: any): Function {\r\n    return this.on(\"reconnecting\", callback, context);\r\n  }\r\n\r\n  public onError(callback: ListenerFn, context?: any): Function {\r\n    return this.on(\"error\", callback, context);\r\n  }\r\n\r\n  public unsubscribeAll() {\r\n    Object.keys(this.operations).forEach((subId) => {\r\n      this.unsubscribe(subId);\r\n    });\r\n  }\r\n\r\n  public applyMiddlewares(\r\n    options: OperationOptions\r\n  ): Promise<OperationOptions> {\r\n    return new Promise((resolve, reject) => {\r\n      const queue = (funcs: Middleware[], scope: any) => {\r\n        const next = (error?: any) => {\r\n          if (error) {\r\n            reject(error);\r\n          } else {\r\n            if (funcs.length > 0) {\r\n              const f = funcs.shift();\r\n              if (f) {\r\n                f.applyMiddleware.apply(scope, [options, next]);\r\n              }\r\n            } else {\r\n              resolve(options);\r\n            }\r\n          }\r\n        };\r\n        next();\r\n      };\r\n\r\n      queue([...this.middlewares], this);\r\n    });\r\n  }\r\n\r\n  public use(middlewares: Middleware[]): SubscriptionClient {\r\n    middlewares.map((middleware) => {\r\n      if (typeof middleware.applyMiddleware === \"function\") {\r\n        this.middlewares.push(middleware);\r\n      } else {\r\n        throw new Error(\r\n          \"Middleware must implement the applyMiddleware function.\"\r\n        );\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  public processReceivedData(receivedData: any) {\r\n    let parsedMessage: any;\r\n    let opId: string;\r\n\r\n    try {\r\n      parsedMessage = this.dataLoadImpl(receivedData);\r\n      opId = parsedMessage.id;\r\n    } catch (e) {\r\n      throw new Error(`Message must be parseable. Got: ${receivedData} ${e}`);\r\n    }\r\n\r\n    if (\r\n      [\r\n        MessageTypes.GQL_DATA,\r\n        MessageTypes.GQL_COMPLETE,\r\n        MessageTypes.GQL_ERROR,\r\n      ].indexOf(parsedMessage.type) !== -1 &&\r\n      !this.operations[opId]\r\n    ) {\r\n      this.unsubscribe(opId);\r\n\r\n      return;\r\n    }\r\n\r\n    if (this.serverSendsKeepalive) {\r\n      // Any kind of deserialized message that arrives from the server implies that the socket connection is alive still.\r\n      this.handleKeepalive();\r\n    }\r\n\r\n    switch (parsedMessage.type) {\r\n      case MessageTypes.GQL_CONNECTION_ERROR:\r\n        if (this.connectionCallback) {\r\n          this.connectionCallback(parsedMessage.payload);\r\n        }\r\n        break;\r\n\r\n      case MessageTypes.GQL_CONNECTION_ACK:\r\n        this.eventEmitter.emit(\r\n          this.reconnecting ? \"reconnected\" : \"connected\",\r\n          parsedMessage.payload\r\n        );\r\n        this.reconnecting = false;\r\n        this.backoff.reset();\r\n        this.maxConnectTimeGenerator.reset();\r\n\r\n        if (this.connectionCallback) {\r\n          this.connectionCallback();\r\n        }\r\n        break;\r\n\r\n      case MessageTypes.GQL_COMPLETE:\r\n        const handler = this.operations[opId].handler;\r\n        delete this.operations[opId];\r\n        handler.call(this, null, null);\r\n        break;\r\n\r\n      case MessageTypes.GQL_ERROR:\r\n        this.operations[opId].handler(\r\n          this.formatErrors(parsedMessage.payload),\r\n          null\r\n        );\r\n        delete this.operations[opId];\r\n        break;\r\n\r\n      case MessageTypes.GQL_DATA:\r\n        const parsedPayload = !parsedMessage.payload.errors\r\n          ? parsedMessage.payload\r\n          : {\r\n              ...parsedMessage.payload,\r\n              errors: this.formatErrors(parsedMessage.payload.errors),\r\n            };\r\n        this.operations[opId].handler(null, parsedPayload);\r\n        break;\r\n\r\n      case MessageTypes.GQL_CONNECTION_KEEP_ALIVE:\r\n        if (!this.serverSendsKeepalive) {\r\n          this.handleKeepalive();\r\n        }\r\n        break;\r\n\r\n      default:\r\n        throw new Error(\"Invalid message type!\");\r\n    }\r\n  }\r\n\r\n  private handleKeepalive(): boolean {\r\n    const firstKA = typeof this.wasKeepAliveReceived === \"undefined\";\r\n    this.wasKeepAliveReceived = true;\r\n\r\n    if (firstKA) {\r\n      this.checkConnection();\r\n    }\r\n\r\n    if (this.checkConnectionIntervalId) {\r\n      clearInterval(this.checkConnectionIntervalId);\r\n      this.checkConnection();\r\n    }\r\n    this.checkConnectionIntervalId = setInterval(\r\n      this.checkConnection.bind(this),\r\n      this.wsTimeout\r\n    );\r\n    return firstKA;\r\n  }\r\n\r\n  private getConnectionParams(\r\n    connectionParams: ConnectionParamsOptions\r\n  ): Function {\r\n    return (): Promise<ConnectionParams> =>\r\n      new Promise((resolve, reject) => {\r\n        if (typeof connectionParams === \"function\") {\r\n          try {\r\n            return resolve(connectionParams.call(null));\r\n          } catch (error) {\r\n            return reject(error);\r\n          }\r\n        }\r\n\r\n        resolve(connectionParams);\r\n      });\r\n  }\r\n\r\n  private executeOperation(\r\n    options: OperationOptions,\r\n    handler: (error: Error[], result?: any) => void\r\n  ): string {\r\n    if (this.client === null) {\r\n      this.connect();\r\n    }\r\n\r\n    const opId = this.generateOperationId();\r\n    this.operations[opId] = { options: options, handler };\r\n\r\n    this.applyMiddlewares(options)\r\n      .then((processedOptions) => {\r\n        this.checkOperationOptions(processedOptions, handler);\r\n        if (this.operations[opId]) {\r\n          this.operations[opId] = { options: processedOptions, handler };\r\n          this.sendMessage(opId, MessageTypes.GQL_START, processedOptions);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.unsubscribe(opId);\r\n        handler(this.formatErrors(error));\r\n      });\r\n\r\n    return opId;\r\n  }\r\n\r\n  private getObserver<T>(\r\n    observerOrNext: Observer<T> | ((v: T) => void),\r\n    error?: (e: Error) => void,\r\n    complete?: () => void\r\n  ) {\r\n    if (typeof observerOrNext === \"function\") {\r\n      return {\r\n        next: (v: T) => observerOrNext(v),\r\n        error: (e: Error) => error && error(e),\r\n        complete: () => complete && complete(),\r\n      };\r\n    }\r\n\r\n    return observerOrNext;\r\n  }\r\n\r\n  private createMaxConnectTimeGenerator() {\r\n    const minValue = this.minWsTimeout;\r\n    const maxValue = this.wsTimeout;\r\n\r\n    return new Backoff({\r\n      min: minValue,\r\n      max: maxValue,\r\n      factor: 1.2,\r\n    });\r\n  }\r\n\r\n  private clearCheckConnectionInterval() {\r\n    if (this.checkConnectionIntervalId) {\r\n      clearInterval(this.checkConnectionIntervalId);\r\n      this.checkConnectionIntervalId = null;\r\n    }\r\n  }\r\n\r\n  private clearMaxConnectTimeout() {\r\n    if (this.maxConnectTimeoutId) {\r\n      clearTimeout(this.maxConnectTimeoutId);\r\n      this.maxConnectTimeoutId = null;\r\n    }\r\n  }\r\n\r\n  private clearTryReconnectTimeout() {\r\n    if (this.tryReconnectTimeoutId) {\r\n      clearTimeout(this.tryReconnectTimeoutId);\r\n      this.tryReconnectTimeoutId = null;\r\n    }\r\n  }\r\n\r\n  private clearInactivityTimeout() {\r\n    if (this.inactivityTimeoutId) {\r\n      clearTimeout(this.inactivityTimeoutId);\r\n      this.inactivityTimeoutId = null;\r\n    }\r\n  }\r\n\r\n  private setInactivityTimeout() {\r\n    if (\r\n      this.inactivityTimeout > 0 &&\r\n      Object.keys(this.operations).length === 0\r\n    ) {\r\n      this.inactivityTimeoutId = setTimeout(() => {\r\n        if (Object.keys(this.operations).length === 0) {\r\n          this.close();\r\n        }\r\n      }, this.inactivityTimeout);\r\n    }\r\n  }\r\n\r\n  private checkOperationOptions(\r\n    options: OperationOptions,\r\n    handler: (error: Error[], result?: any) => void\r\n  ) {\r\n    const { query, variables, operationName } = options;\r\n\r\n    if (!query) {\r\n      throw new Error(\"Must provide a query.\");\r\n    }\r\n\r\n    if (!handler) {\r\n      throw new Error(\"Must provide an handler.\");\r\n    }\r\n\r\n    if (\r\n      (!isString(query) && !getOperationAST(query, operationName)) ||\r\n      (operationName && !isString(operationName)) ||\r\n      (variables && !isObject(variables))\r\n    ) {\r\n      throw new Error(\r\n        \"Incorrect option types. query must be a string or a document,\" +\r\n          \"`operationName` must be a string, and `variables` must be an object.\"\r\n      );\r\n    }\r\n  }\r\n\r\n  private buildMessage(id: string, type: string, payload: any) {\r\n    const payloadToReturn =\r\n      payload && payload.query\r\n        ? {\r\n            ...payload,\r\n            query:\r\n              typeof payload.query === \"string\"\r\n                ? payload.query\r\n                : print(payload.query),\r\n          }\r\n        : payload;\r\n\r\n    return {\r\n      id,\r\n      type,\r\n      payload: payloadToReturn,\r\n    };\r\n  }\r\n\r\n  // ensure we have an array of errors\r\n  private formatErrors(errors: any): FormatedError[] {\r\n    if (Array.isArray(errors)) {\r\n      return errors;\r\n    }\r\n\r\n    // TODO  we should not pass ValidationError to callback in the future.\r\n    // ValidationError\r\n    if (errors && errors.errors) {\r\n      return this.formatErrors(errors.errors);\r\n    }\r\n\r\n    if (errors && errors.message) {\r\n      return [errors];\r\n    }\r\n\r\n    return [\r\n      {\r\n        name: \"FormatedError\",\r\n        message: \"Unknown error\",\r\n        originalError: errors,\r\n      },\r\n    ];\r\n  }\r\n\r\n  private sendMessage(id: string, type: string, payload: any) {\r\n    this.sendMessageRaw(this.buildMessage(id, type, payload));\r\n  }\r\n\r\n  // send message, or queue it if connection is not open\r\n  private sendMessageRaw(message: Object) {\r\n    switch (this.status) {\r\n      case this.wsImpl.OPEN:\r\n        let serializedMessage: string | Uint8Array = this.dataDumpImpl(message);\r\n        try {\r\n          this.dataLoadImpl(serializedMessage);\r\n        } catch (e) {\r\n          this.eventEmitter.emit(\r\n            \"error\",\r\n            new Error(`Message must be serializable. Got: ${message}`)\r\n          );\r\n        }\r\n\r\n        this.client.send(serializedMessage);\r\n        break;\r\n      case this.wsImpl.CONNECTING:\r\n        this.unsentMessagesQueue.push(message);\r\n\r\n        break;\r\n      default:\r\n        if (!this.reconnecting) {\r\n          this.eventEmitter.emit(\r\n            \"error\",\r\n            new Error(\r\n              \"A message was not sent because socket is not connected, is closing or \" +\r\n                \"is already closed. Message was: \" +\r\n                JSON.stringify(message)\r\n            )\r\n          );\r\n        }\r\n    }\r\n  }\r\n\r\n  private generateOperationId(): string {\r\n    return String(++this.nextOperationId);\r\n  }\r\n\r\n  private tryReconnect() {\r\n    if (!this.reconnect || this.backoff.attempts >= this.reconnectionAttempts) {\r\n      return;\r\n    }\r\n\r\n    if (!this.reconnecting) {\r\n      Object.keys(this.operations).forEach((key) => {\r\n        this.unsentMessagesQueue.push(\r\n          this.buildMessage(\r\n            key,\r\n            MessageTypes.GQL_START,\r\n            this.operations[key].options\r\n          )\r\n        );\r\n      });\r\n      this.reconnecting = true;\r\n    }\r\n\r\n    this.clearTryReconnectTimeout();\r\n\r\n    const delay = this.backoff.duration();\r\n    this.tryReconnectTimeoutId = setTimeout(() => {\r\n      this.connect();\r\n    }, delay);\r\n  }\r\n\r\n  private flushUnsentMessagesQueue() {\r\n    this.unsentMessagesQueue.forEach((message) => {\r\n      this.sendMessageRaw(message);\r\n    });\r\n    this.unsentMessagesQueue = [];\r\n  }\r\n\r\n  private checkConnection() {\r\n    if (this.wasKeepAliveReceived) {\r\n      this.wasKeepAliveReceived = false;\r\n      return;\r\n    }\r\n\r\n    if (!this.reconnecting) {\r\n      this.close(false, true);\r\n    }\r\n  }\r\n\r\n  private checkMaxConnectTimeout() {\r\n    this.clearMaxConnectTimeout();\r\n\r\n    // Max timeout trying to connect\r\n    this.maxConnectTimeoutId = setTimeout(() => {\r\n      if (this.status !== this.wsImpl.OPEN) {\r\n        this.reconnecting = true;\r\n        this.close(false, true);\r\n      }\r\n    }, this.maxConnectTimeGenerator.duration());\r\n  }\r\n\r\n  private connect() {\r\n    this.client = new this.wsImpl(\r\n      this.url,\r\n      this.wsProtocols,\r\n      ...this.wsOptionArguments\r\n    );\r\n\r\n    this.checkMaxConnectTimeout();\r\n\r\n    this.client.onopen = async () => {\r\n      if (this.status === this.wsImpl.OPEN) {\r\n        this.clearMaxConnectTimeout();\r\n        this.closedByUser = false;\r\n        this.eventEmitter.emit(\r\n          this.reconnecting ? \"reconnecting\" : \"connecting\"\r\n        );\r\n\r\n        try {\r\n          const connectionParams: ConnectionParams =\r\n            await this.connectionParams();\r\n\r\n          // Send CONNECTION_INIT message, no need to wait for connection to success (reduce roundtrips)\r\n          this.sendMessage(\r\n            undefined,\r\n            MessageTypes.GQL_CONNECTION_INIT,\r\n            connectionParams\r\n          );\r\n          this.flushUnsentMessagesQueue();\r\n        } catch (error) {\r\n          this.sendMessage(undefined, MessageTypes.GQL_CONNECTION_ERROR, error);\r\n          this.flushUnsentMessagesQueue();\r\n        }\r\n      }\r\n    };\r\n\r\n    this.client.onclose = (event: any) => {\r\n      if (!this.closedByUser) {\r\n        const code = event ? event.code || null : null;\r\n        this.close(false, false, code);\r\n      }\r\n    };\r\n\r\n    this.client.onerror = (err: Error) => {\r\n      // Capture and ignore errors to prevent unhandled exceptions, wait for\r\n      // onclose to fire before attempting a reconnect.\r\n      this.eventEmitter.emit(\"error\", err);\r\n    };\r\n\r\n    this.client.onmessage = ({ data }: { data: any }) => {\r\n      // The message data can be either a string (text transport) or a Blob (binary transport),\r\n      // To retrieve the binary data as an *array* we must use async api calls while making sure to\r\n      // keep the order of messages for processing. The order is kept by chaining each incoming\r\n      // message after the one before it. To support both binary and text messages altenately we\r\n      // append the text processing to the chain as well.\r\n      if (typeof data === \"string\") {\r\n        // Message arrived on text transport.\r\n        this.dataReceiver = this.dataReceiver\r\n          .catch(() => null) // ignore error of previous message processing if any; it is irrelevant now\r\n          .then(() => this.processReceivedData(data));\r\n      } else {\r\n        // Message arrived on binary transport; data is a Blob.\r\n        this.dataReceiver = this.dataReceiver\r\n          .catch(() => null) // ignore error of previous message processing if any; it is irrelevant now\r\n          .then(() => data.arrayBuffer()) // no error handler, socket read will likely trigger disconnect\r\n          .then((buffer: ArrayBuffer) =>\r\n            this.processReceivedData(new Uint8Array(buffer))\r\n          );\r\n      }\r\n    };\r\n  }\r\n\r\n  private unsubscribe(opId: string) {\r\n    if (this.operations[opId]) {\r\n      delete this.operations[opId];\r\n      this.setInactivityTimeout();\r\n      this.sendMessage(opId, MessageTypes.GQL_STOP, undefined);\r\n    }\r\n  }\r\n}\r\n"]}